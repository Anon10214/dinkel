# Generated from Cypher.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,129,1684,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,1,0,3,0,214,8,0,1,0,1,0,3,0,218,8,0,1,0,
        3,0,221,8,0,1,0,3,0,224,8,0,1,0,1,0,1,1,1,1,1,2,1,2,3,2,232,8,2,
        1,3,1,3,3,3,236,8,3,1,3,5,3,239,8,3,10,3,12,3,242,9,3,1,4,1,4,1,
        4,1,4,3,4,248,8,4,1,4,1,4,1,4,3,4,253,8,4,1,4,3,4,256,8,4,1,5,1,
        5,3,5,260,8,5,1,6,1,6,3,6,264,8,6,5,6,266,8,6,10,6,12,6,269,9,6,
        1,6,1,6,1,6,3,6,274,8,6,5,6,276,8,6,10,6,12,6,279,9,6,1,6,1,6,3,
        6,283,8,6,1,6,5,6,286,8,6,10,6,12,6,289,9,6,1,6,3,6,292,8,6,1,6,
        3,6,295,8,6,3,6,297,8,6,1,7,1,7,3,7,301,8,7,5,7,303,8,7,10,7,12,
        7,306,9,7,1,7,1,7,3,7,310,8,7,5,7,312,8,7,10,7,12,7,315,9,7,1,7,
        1,7,3,7,319,8,7,4,7,321,8,7,11,7,12,7,322,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,3,8,334,8,8,1,9,1,9,1,9,1,9,3,9,340,8,9,1,10,1,10,
        3,10,344,8,10,1,10,1,10,3,10,348,8,10,1,10,1,10,3,10,352,8,10,1,
        10,3,10,355,8,10,1,11,1,11,3,11,359,8,11,1,11,1,11,3,11,363,8,11,
        1,11,1,11,3,11,367,8,11,1,11,1,11,1,12,1,12,3,12,373,8,12,1,12,1,
        12,3,12,377,8,12,1,12,1,12,3,12,381,8,12,1,12,1,12,3,12,385,8,12,
        1,12,1,12,3,12,389,8,12,4,12,391,8,12,11,12,12,12,392,1,12,1,12,
        1,13,1,13,3,13,399,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        3,14,409,8,14,1,14,1,14,1,14,5,14,414,8,14,10,14,12,14,417,9,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,429,8,15,
        1,16,1,16,3,16,433,8,16,1,16,1,16,1,17,1,17,3,17,439,8,17,1,17,1,
        17,3,17,443,8,17,1,17,1,17,3,17,447,8,17,1,17,5,17,450,8,17,10,17,
        12,17,453,9,17,1,18,1,18,3,18,457,8,18,1,18,1,18,3,18,461,8,18,1,
        18,1,18,1,18,1,18,3,18,467,8,18,1,18,1,18,3,18,471,8,18,1,18,1,18,
        1,18,1,18,3,18,477,8,18,1,18,1,18,3,18,481,8,18,1,18,1,18,1,18,1,
        18,3,18,487,8,18,1,18,1,18,3,18,491,8,18,1,19,1,19,3,19,495,8,19,
        1,19,1,19,3,19,499,8,19,1,19,1,19,3,19,503,8,19,1,19,1,19,3,19,507,
        8,19,1,19,5,19,510,8,19,10,19,12,19,513,9,19,1,20,1,20,1,20,1,20,
        3,20,519,8,20,1,20,1,20,3,20,523,8,20,1,20,5,20,526,8,20,10,20,12,
        20,529,9,20,1,21,1,21,1,21,1,21,3,21,535,8,21,1,22,1,22,1,22,1,22,
        3,22,541,8,22,1,22,1,22,1,22,3,22,546,8,22,1,23,1,23,1,23,1,23,3,
        23,552,8,23,1,23,3,23,555,8,23,1,23,1,23,1,23,1,23,3,23,561,8,23,
        3,23,563,8,23,1,24,1,24,3,24,567,8,24,1,24,1,24,3,24,571,8,24,1,
        24,5,24,574,8,24,10,24,12,24,577,9,24,1,24,3,24,580,8,24,1,24,3,
        24,583,8,24,1,25,1,25,1,25,1,25,1,25,3,25,590,8,25,1,25,1,25,1,26,
        1,26,1,26,3,26,597,8,26,1,26,3,26,600,8,26,1,27,1,27,1,27,1,28,3,
        28,606,8,28,1,28,3,28,609,8,28,1,28,1,28,1,28,1,28,3,28,615,8,28,
        1,28,1,28,3,28,619,8,28,1,28,1,28,3,28,623,8,28,1,29,1,29,3,29,627,
        8,29,1,29,1,29,3,29,631,8,29,1,29,5,29,634,8,29,10,29,12,29,637,
        9,29,1,29,1,29,3,29,641,8,29,1,29,1,29,3,29,645,8,29,1,29,5,29,648,
        8,29,10,29,12,29,651,9,29,3,29,653,8,29,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,3,30,662,8,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,670,8,
        31,1,31,1,31,3,31,674,8,31,1,31,5,31,677,8,31,10,31,12,31,680,9,
        31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,3,34,692,8,
        34,1,34,3,34,695,8,34,1,35,1,35,1,35,1,35,1,36,1,36,3,36,703,8,36,
        1,36,1,36,3,36,707,8,36,1,36,5,36,710,8,36,10,36,12,36,713,9,36,
        1,37,1,37,3,37,717,8,37,1,37,1,37,3,37,721,8,37,1,37,1,37,1,37,3,
        37,726,8,37,1,38,1,38,1,39,1,39,3,39,732,8,39,1,39,5,39,735,8,39,
        10,39,12,39,738,9,39,1,39,1,39,1,39,1,39,3,39,744,8,39,1,40,1,40,
        3,40,748,8,40,1,40,4,40,751,8,40,11,40,12,40,752,1,41,1,41,3,41,
        757,8,41,1,41,1,41,3,41,761,8,41,3,41,763,8,41,1,41,1,41,3,41,767,
        8,41,3,41,769,8,41,1,41,1,41,3,41,773,8,41,3,41,775,8,41,1,41,1,
        41,1,42,1,42,3,42,781,8,42,1,42,1,42,1,43,1,43,3,43,787,8,43,1,43,
        1,43,3,43,791,8,43,1,43,3,43,794,8,43,1,43,3,43,797,8,43,1,43,1,
        43,3,43,801,8,43,1,43,1,43,1,43,1,43,3,43,807,8,43,1,43,1,43,3,43,
        811,8,43,1,43,3,43,814,8,43,1,43,3,43,817,8,43,1,43,1,43,1,43,1,
        43,3,43,823,8,43,1,43,3,43,826,8,43,1,43,3,43,829,8,43,1,43,1,43,
        3,43,833,8,43,1,43,1,43,1,43,1,43,3,43,839,8,43,1,43,3,43,842,8,
        43,1,43,3,43,845,8,43,1,43,1,43,3,43,849,8,43,1,44,1,44,3,44,853,
        8,44,1,44,1,44,3,44,857,8,44,3,44,859,8,44,1,44,1,44,3,44,863,8,
        44,3,44,865,8,44,1,44,3,44,868,8,44,1,44,1,44,3,44,872,8,44,3,44,
        874,8,44,1,44,1,44,1,45,1,45,3,45,880,8,45,1,46,1,46,3,46,884,8,
        46,1,46,1,46,3,46,888,8,46,1,46,1,46,3,46,892,8,46,1,46,3,46,895,
        8,46,1,46,5,46,898,8,46,10,46,12,46,901,9,46,1,47,1,47,3,47,905,
        8,47,1,47,5,47,908,8,47,10,47,12,47,911,9,47,1,48,1,48,3,48,915,
        8,48,1,48,1,48,1,49,1,49,3,49,921,8,49,1,49,1,49,3,49,925,8,49,3,
        49,927,8,49,1,49,1,49,3,49,931,8,49,1,49,1,49,3,49,935,8,49,3,49,
        937,8,49,3,49,939,8,49,1,50,1,50,1,51,1,51,1,52,1,52,3,52,947,8,
        52,1,52,4,52,950,8,52,11,52,12,52,951,1,53,1,53,1,54,1,54,1,54,1,
        54,1,54,5,54,961,8,54,10,54,12,54,964,9,54,1,55,1,55,1,55,1,55,1,
        55,5,55,971,8,55,10,55,12,55,974,9,55,1,56,1,56,1,56,1,56,1,56,5,
        56,981,8,56,10,56,12,56,984,9,56,1,57,1,57,3,57,988,8,57,5,57,990,
        8,57,10,57,12,57,993,9,57,1,57,1,57,1,58,1,58,3,58,999,8,58,1,58,
        5,58,1002,8,58,10,58,12,58,1005,9,58,1,59,1,59,3,59,1009,8,59,1,
        59,1,59,1,59,3,59,1014,8,59,1,59,1,59,1,59,3,59,1019,8,59,1,59,1,
        59,1,59,3,59,1024,8,59,1,59,1,59,1,59,3,59,1029,8,59,1,59,1,59,1,
        59,3,59,1034,8,59,1,59,1,59,1,59,3,59,1039,8,59,1,59,3,59,1042,8,
        59,1,60,1,60,1,60,1,60,5,60,1048,8,60,10,60,12,60,1051,9,60,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1063,8,61,1,61,
        3,61,1066,8,61,1,61,1,61,1,62,1,62,1,62,3,62,1073,8,62,1,62,1,62,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1087,8,63,
        1,64,1,64,3,64,1091,8,64,1,64,1,64,3,64,1095,8,64,1,64,1,64,3,64,
        1099,8,64,1,64,1,64,3,64,1103,8,64,1,64,5,64,1106,8,64,10,64,12,
        64,1109,9,64,1,65,1,65,3,65,1113,8,65,1,65,1,65,3,65,1117,8,65,1,
        65,1,65,3,65,1121,8,65,1,65,1,65,3,65,1125,8,65,1,65,1,65,3,65,1129,
        8,65,1,65,1,65,3,65,1133,8,65,1,65,5,65,1136,8,65,10,65,12,65,1139,
        9,65,1,66,1,66,3,66,1143,8,66,1,66,1,66,3,66,1147,8,66,1,66,5,66,
        1150,8,66,10,66,12,66,1153,9,66,1,67,1,67,1,67,3,67,1158,8,67,1,
        67,3,67,1161,8,67,1,68,1,68,3,68,1165,8,68,1,68,1,68,1,68,1,68,1,
        68,3,68,1172,8,68,1,68,1,68,3,68,1176,8,68,1,68,1,68,3,68,1180,8,
        68,1,68,5,68,1183,8,68,10,68,12,68,1186,9,68,1,69,1,69,3,69,1190,
        8,69,1,69,5,69,1193,8,69,10,69,12,69,1196,9,69,1,69,3,69,1199,8,
        69,1,69,3,69,1202,8,69,1,70,1,70,3,70,1206,8,70,1,70,1,70,1,71,1,
        71,1,71,1,71,1,71,3,71,1215,8,71,1,71,1,71,3,71,1219,8,71,1,71,1,
        71,3,71,1223,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,3,71,1235,8,71,1,72,1,72,3,72,1239,8,72,1,72,4,72,1242,8,72,11,
        72,12,72,1243,1,72,1,72,3,72,1248,8,72,1,72,1,72,3,72,1252,8,72,
        1,72,4,72,1255,8,72,11,72,12,72,1256,3,72,1259,8,72,1,72,3,72,1262,
        8,72,1,72,1,72,3,72,1266,8,72,1,72,3,72,1269,8,72,1,72,3,72,1272,
        8,72,1,72,1,72,1,73,1,73,3,73,1278,8,73,1,73,1,73,3,73,1282,8,73,
        1,73,1,73,3,73,1286,8,73,1,73,1,73,1,74,1,74,3,74,1292,8,74,1,74,
        1,74,3,74,1296,8,74,1,74,1,74,3,74,1300,8,74,1,74,3,74,1303,8,74,
        1,74,3,74,1306,8,74,1,74,1,74,1,75,1,75,3,75,1312,8,75,1,75,1,75,
        3,75,1316,8,75,1,75,1,75,3,75,1320,8,75,3,75,1322,8,75,1,75,1,75,
        3,75,1326,8,75,1,75,1,75,3,75,1330,8,75,3,75,1332,8,75,1,75,1,75,
        3,75,1336,8,75,1,75,1,75,3,75,1340,8,75,1,75,1,75,1,76,1,76,3,76,
        1346,8,76,1,76,1,76,3,76,1350,8,76,1,76,1,76,3,76,1354,8,76,1,76,
        1,76,1,76,1,76,3,76,1360,8,76,1,76,1,76,3,76,1364,8,76,1,76,1,76,
        3,76,1368,8,76,1,76,1,76,1,76,1,76,3,76,1374,8,76,1,76,1,76,3,76,
        1378,8,76,1,76,1,76,3,76,1382,8,76,1,76,1,76,1,76,1,76,3,76,1388,
        8,76,1,76,1,76,3,76,1392,8,76,1,76,1,76,3,76,1396,8,76,1,76,1,76,
        3,76,1400,8,76,1,77,1,77,3,77,1404,8,77,1,77,3,77,1407,8,77,1,78,
        1,78,1,79,1,79,3,79,1413,8,79,1,79,1,79,3,79,1417,8,79,1,79,1,79,
        1,80,1,80,1,80,1,80,1,80,1,80,1,81,1,81,3,81,1429,8,81,1,81,1,81,
        3,81,1433,8,81,1,81,1,81,3,81,1437,8,81,3,81,1439,8,81,1,81,1,81,
        3,81,1443,8,81,1,81,1,81,3,81,1447,8,81,1,81,1,81,3,81,1451,8,81,
        5,81,1453,8,81,10,81,12,81,1456,9,81,3,81,1458,8,81,1,81,1,81,1,
        82,1,82,1,82,1,83,1,83,3,83,1467,8,83,1,83,1,83,3,83,1471,8,83,1,
        83,1,83,1,83,3,83,1476,8,83,1,83,3,83,1479,8,83,1,83,1,83,3,83,1483,
        8,83,1,83,3,83,1486,8,83,4,83,1488,8,83,11,83,12,83,1489,3,83,1492,
        8,83,1,83,3,83,1495,8,83,1,83,1,83,1,84,1,84,3,84,1501,8,84,1,84,
        1,84,3,84,1505,8,84,1,84,1,84,1,84,3,84,1510,8,84,1,84,3,84,1513,
        8,84,1,84,1,84,3,84,1517,8,84,1,84,3,84,1520,8,84,4,84,1522,8,84,
        11,84,12,84,1523,3,84,1526,8,84,1,84,3,84,1529,8,84,1,84,1,84,1,
        85,1,85,3,85,1535,8,85,1,85,1,85,3,85,1539,8,85,1,85,1,85,3,85,1543,
        8,85,1,85,1,85,3,85,1547,8,85,1,85,1,85,3,85,1551,8,85,5,85,1553,
        8,85,10,85,12,85,1556,9,85,3,85,1558,8,85,1,85,1,85,1,86,1,86,1,
        87,1,87,1,88,1,88,1,88,1,89,1,89,1,89,5,89,1572,8,89,10,89,12,89,
        1575,9,89,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,3,91,1585,8,91,
        1,92,1,92,1,93,1,93,3,93,1591,8,93,1,94,1,94,1,95,1,95,1,96,1,96,
        3,96,1599,8,96,1,96,1,96,3,96,1603,8,96,1,96,1,96,3,96,1607,8,96,
        1,96,1,96,3,96,1611,8,96,5,96,1613,8,96,10,96,12,96,1616,9,96,3,
        96,1618,8,96,1,96,1,96,1,97,1,97,3,97,1624,8,97,1,97,1,97,3,97,1628,
        8,97,1,97,1,97,3,97,1632,8,97,1,97,1,97,3,97,1636,8,97,1,97,1,97,
        3,97,1640,8,97,1,97,1,97,3,97,1644,8,97,1,97,1,97,3,97,1648,8,97,
        1,97,1,97,3,97,1652,8,97,5,97,1654,8,97,10,97,12,97,1657,9,97,3,
        97,1659,8,97,1,97,1,97,1,98,1,98,1,99,1,99,1,99,3,99,1668,8,99,1,
        100,1,100,3,100,1672,8,100,1,101,1,101,1,102,1,102,1,103,1,103,1,
        104,1,104,1,105,1,105,1,105,0,0,106,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,0,10,1,0,70,73,1,0,21,22,1,0,95,96,1,0,97,99,1,0,
        107,108,6,0,47,50,52,60,63,84,86,90,94,96,111,120,5,0,85,85,91,93,
        100,100,121,123,126,126,2,0,16,16,28,31,2,0,17,17,32,35,2,0,22,22,
        36,46,1930,0,213,1,0,0,0,2,227,1,0,0,0,4,231,1,0,0,0,6,233,1,0,0,
        0,8,255,1,0,0,0,10,259,1,0,0,0,12,296,1,0,0,0,14,320,1,0,0,0,16,
        333,1,0,0,0,18,339,1,0,0,0,20,343,1,0,0,0,22,356,1,0,0,0,24,370,
        1,0,0,0,26,396,1,0,0,0,28,406,1,0,0,0,30,428,1,0,0,0,32,430,1,0,
        0,0,34,436,1,0,0,0,36,490,1,0,0,0,38,494,1,0,0,0,40,514,1,0,0,0,
        42,534,1,0,0,0,44,536,1,0,0,0,46,547,1,0,0,0,48,564,1,0,0,0,50,589,
        1,0,0,0,52,593,1,0,0,0,54,601,1,0,0,0,56,608,1,0,0,0,58,652,1,0,
        0,0,60,661,1,0,0,0,62,663,1,0,0,0,64,681,1,0,0,0,66,685,1,0,0,0,
        68,689,1,0,0,0,70,696,1,0,0,0,72,700,1,0,0,0,74,725,1,0,0,0,76,727,
        1,0,0,0,78,743,1,0,0,0,80,745,1,0,0,0,82,754,1,0,0,0,84,778,1,0,
        0,0,86,848,1,0,0,0,88,850,1,0,0,0,90,879,1,0,0,0,92,881,1,0,0,0,
        94,902,1,0,0,0,96,912,1,0,0,0,98,918,1,0,0,0,100,940,1,0,0,0,102,
        942,1,0,0,0,104,944,1,0,0,0,106,953,1,0,0,0,108,955,1,0,0,0,110,
        965,1,0,0,0,112,975,1,0,0,0,114,991,1,0,0,0,116,996,1,0,0,0,118,
        1041,1,0,0,0,120,1043,1,0,0,0,122,1062,1,0,0,0,124,1069,1,0,0,0,
        126,1086,1,0,0,0,128,1088,1,0,0,0,130,1110,1,0,0,0,132,1140,1,0,
        0,0,134,1160,1,0,0,0,136,1162,1,0,0,0,138,1187,1,0,0,0,140,1203,
        1,0,0,0,142,1234,1,0,0,0,144,1258,1,0,0,0,146,1275,1,0,0,0,148,1289,
        1,0,0,0,150,1309,1,0,0,0,152,1399,1,0,0,0,154,1401,1,0,0,0,156,1408,
        1,0,0,0,158,1410,1,0,0,0,160,1420,1,0,0,0,162,1426,1,0,0,0,164,1461,
        1,0,0,0,166,1464,1,0,0,0,168,1498,1,0,0,0,170,1532,1,0,0,0,172,1561,
        1,0,0,0,174,1563,1,0,0,0,176,1565,1,0,0,0,178,1573,1,0,0,0,180,1576,
        1,0,0,0,182,1584,1,0,0,0,184,1586,1,0,0,0,186,1590,1,0,0,0,188,1592,
        1,0,0,0,190,1594,1,0,0,0,192,1596,1,0,0,0,194,1621,1,0,0,0,196,1662,
        1,0,0,0,198,1664,1,0,0,0,200,1671,1,0,0,0,202,1673,1,0,0,0,204,1675,
        1,0,0,0,206,1677,1,0,0,0,208,1679,1,0,0,0,210,1681,1,0,0,0,212,214,
        5,127,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,220,
        3,2,1,0,216,218,5,127,0,0,217,216,1,0,0,0,217,218,1,0,0,0,218,219,
        1,0,0,0,219,221,5,1,0,0,220,217,1,0,0,0,220,221,1,0,0,0,221,223,
        1,0,0,0,222,224,5,127,0,0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,
        1,0,0,0,225,226,5,0,0,1,226,1,1,0,0,0,227,228,3,4,2,0,228,3,1,0,
        0,0,229,232,3,6,3,0,230,232,3,46,23,0,231,229,1,0,0,0,231,230,1,
        0,0,0,232,5,1,0,0,0,233,240,3,10,5,0,234,236,5,127,0,0,235,234,1,
        0,0,0,235,236,1,0,0,0,236,237,1,0,0,0,237,239,3,8,4,0,238,235,1,
        0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,7,1,0,
        0,0,242,240,1,0,0,0,243,244,5,47,0,0,244,245,5,127,0,0,245,247,5,
        48,0,0,246,248,5,127,0,0,247,246,1,0,0,0,247,248,1,0,0,0,248,249,
        1,0,0,0,249,256,3,10,5,0,250,252,5,47,0,0,251,253,5,127,0,0,252,
        251,1,0,0,0,252,253,1,0,0,0,253,254,1,0,0,0,254,256,3,10,5,0,255,
        243,1,0,0,0,255,250,1,0,0,0,256,9,1,0,0,0,257,260,3,12,6,0,258,260,
        3,14,7,0,259,257,1,0,0,0,259,258,1,0,0,0,260,11,1,0,0,0,261,263,
        3,18,9,0,262,264,5,127,0,0,263,262,1,0,0,0,263,264,1,0,0,0,264,266,
        1,0,0,0,265,261,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,
        1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,297,3,54,27,0,271,273,
        3,18,9,0,272,274,5,127,0,0,273,272,1,0,0,0,273,274,1,0,0,0,274,276,
        1,0,0,0,275,271,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,
        1,0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,287,3,16,8,0,281,283,
        5,127,0,0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,286,
        3,16,8,0,285,282,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,
        1,0,0,0,288,294,1,0,0,0,289,287,1,0,0,0,290,292,5,127,0,0,291,290,
        1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,295,3,54,27,0,294,291,
        1,0,0,0,294,295,1,0,0,0,295,297,1,0,0,0,296,267,1,0,0,0,296,277,
        1,0,0,0,297,13,1,0,0,0,298,300,3,18,9,0,299,301,5,127,0,0,300,299,
        1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,298,1,0,0,0,303,306,
        1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,313,1,0,0,0,306,304,
        1,0,0,0,307,309,3,16,8,0,308,310,5,127,0,0,309,308,1,0,0,0,309,310,
        1,0,0,0,310,312,1,0,0,0,311,307,1,0,0,0,312,315,1,0,0,0,313,311,
        1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,313,1,0,0,0,316,318,
        3,52,26,0,317,319,5,127,0,0,318,317,1,0,0,0,318,319,1,0,0,0,319,
        321,1,0,0,0,320,304,1,0,0,0,321,322,1,0,0,0,322,320,1,0,0,0,322,
        323,1,0,0,0,323,324,1,0,0,0,324,325,3,12,6,0,325,15,1,0,0,0,326,
        334,3,32,16,0,327,334,3,28,14,0,328,334,3,24,12,0,329,334,3,38,19,
        0,330,334,3,34,17,0,331,334,3,22,11,0,332,334,3,40,20,0,333,326,
        1,0,0,0,333,327,1,0,0,0,333,328,1,0,0,0,333,329,1,0,0,0,333,330,
        1,0,0,0,333,331,1,0,0,0,333,332,1,0,0,0,334,17,1,0,0,0,335,340,3,
        20,10,0,336,340,3,26,13,0,337,340,3,44,22,0,338,340,3,22,11,0,339,
        335,1,0,0,0,339,336,1,0,0,0,339,337,1,0,0,0,339,338,1,0,0,0,340,
        19,1,0,0,0,341,342,5,49,0,0,342,344,5,127,0,0,343,341,1,0,0,0,343,
        344,1,0,0,0,344,345,1,0,0,0,345,347,5,50,0,0,346,348,5,127,0,0,347,
        346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,354,3,72,36,0,350,
        352,5,127,0,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,
        355,3,70,35,0,354,351,1,0,0,0,354,355,1,0,0,0,355,21,1,0,0,0,356,
        358,5,61,0,0,357,359,5,127,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,
        360,1,0,0,0,360,362,5,2,0,0,361,363,5,127,0,0,362,361,1,0,0,0,362,
        363,1,0,0,0,363,364,1,0,0,0,364,366,3,6,3,0,365,367,5,127,0,0,366,
        365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,369,5,3,0,0,369,
        23,1,0,0,0,370,372,5,51,0,0,371,373,5,127,0,0,372,371,1,0,0,0,372,
        373,1,0,0,0,373,374,1,0,0,0,374,376,5,4,0,0,375,377,5,127,0,0,376,
        375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,380,3,160,80,0,379,
        381,5,127,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,
        384,5,5,0,0,383,385,5,127,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,
        390,1,0,0,0,386,388,3,16,8,0,387,389,5,127,0,0,388,387,1,0,0,0,388,
        389,1,0,0,0,389,391,1,0,0,0,390,386,1,0,0,0,391,392,1,0,0,0,392,
        390,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,5,6,0,0,395,
        25,1,0,0,0,396,398,5,52,0,0,397,399,5,127,0,0,398,397,1,0,0,0,398,
        399,1,0,0,0,399,400,1,0,0,0,400,401,3,106,53,0,401,402,5,127,0,0,
        402,403,5,53,0,0,403,404,5,127,0,0,404,405,3,180,90,0,405,27,1,0,
        0,0,406,408,5,54,0,0,407,409,5,127,0,0,408,407,1,0,0,0,408,409,1,
        0,0,0,409,410,1,0,0,0,410,415,3,74,37,0,411,412,5,127,0,0,412,414,
        3,30,15,0,413,411,1,0,0,0,414,417,1,0,0,0,415,413,1,0,0,0,415,416,
        1,0,0,0,416,29,1,0,0,0,417,415,1,0,0,0,418,419,5,55,0,0,419,420,
        5,127,0,0,420,421,5,50,0,0,421,422,5,127,0,0,422,429,3,34,17,0,423,
        424,5,55,0,0,424,425,5,127,0,0,425,426,5,56,0,0,426,427,5,127,0,
        0,427,429,3,34,17,0,428,418,1,0,0,0,428,423,1,0,0,0,429,31,1,0,0,
        0,430,432,5,56,0,0,431,433,5,127,0,0,432,431,1,0,0,0,432,433,1,0,
        0,0,433,434,1,0,0,0,434,435,3,72,36,0,435,33,1,0,0,0,436,438,5,57,
        0,0,437,439,5,127,0,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,1,
        0,0,0,440,451,3,36,18,0,441,443,5,127,0,0,442,441,1,0,0,0,442,443,
        1,0,0,0,443,444,1,0,0,0,444,446,5,7,0,0,445,447,5,127,0,0,446,445,
        1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,450,3,36,18,0,449,442,
        1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,0,452,35,1,
        0,0,0,453,451,1,0,0,0,454,456,3,104,52,0,455,457,5,127,0,0,456,455,
        1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,460,5,8,0,0,459,461,
        5,127,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,463,
        3,106,53,0,463,491,1,0,0,0,464,466,3,180,90,0,465,467,5,127,0,0,
        466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,470,5,8,0,0,
        469,471,5,127,0,0,470,469,1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,
        0,472,473,3,106,53,0,473,491,1,0,0,0,474,476,3,180,90,0,475,477,
        5,127,0,0,476,475,1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,480,
        5,9,0,0,479,481,5,127,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,
        1,0,0,0,482,483,3,106,53,0,483,491,1,0,0,0,484,486,3,180,90,0,485,
        487,5,127,0,0,486,485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,
        489,3,94,47,0,489,491,1,0,0,0,490,454,1,0,0,0,490,464,1,0,0,0,490,
        474,1,0,0,0,490,484,1,0,0,0,491,37,1,0,0,0,492,493,5,58,0,0,493,
        495,5,127,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,
        498,5,59,0,0,497,499,5,127,0,0,498,497,1,0,0,0,498,499,1,0,0,0,499,
        500,1,0,0,0,500,511,3,106,53,0,501,503,5,127,0,0,502,501,1,0,0,0,
        502,503,1,0,0,0,503,504,1,0,0,0,504,506,5,7,0,0,505,507,5,127,0,
        0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,510,3,106,
        53,0,509,502,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,
        0,0,512,39,1,0,0,0,513,511,1,0,0,0,514,515,5,60,0,0,515,516,5,127,
        0,0,516,527,3,42,21,0,517,519,5,127,0,0,518,517,1,0,0,0,518,519,
        1,0,0,0,519,520,1,0,0,0,520,522,5,7,0,0,521,523,5,127,0,0,522,521,
        1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,526,3,42,21,0,525,518,
        1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,41,1,
        0,0,0,529,527,1,0,0,0,530,531,3,180,90,0,531,532,3,94,47,0,532,535,
        1,0,0,0,533,535,3,104,52,0,534,530,1,0,0,0,534,533,1,0,0,0,535,43,
        1,0,0,0,536,537,5,61,0,0,537,538,5,127,0,0,538,545,3,170,85,0,539,
        541,5,127,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,
        543,5,62,0,0,543,544,5,127,0,0,544,546,3,48,24,0,545,540,1,0,0,0,
        545,546,1,0,0,0,546,45,1,0,0,0,547,548,5,61,0,0,548,551,5,127,0,
        0,549,552,3,170,85,0,550,552,3,172,86,0,551,549,1,0,0,0,551,550,
        1,0,0,0,552,562,1,0,0,0,553,555,5,127,0,0,554,553,1,0,0,0,554,555,
        1,0,0,0,555,556,1,0,0,0,556,557,5,62,0,0,557,560,5,127,0,0,558,561,
        5,10,0,0,559,561,3,48,24,0,560,558,1,0,0,0,560,559,1,0,0,0,561,563,
        1,0,0,0,562,554,1,0,0,0,562,563,1,0,0,0,563,47,1,0,0,0,564,575,3,
        50,25,0,565,567,5,127,0,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,
        1,0,0,0,568,570,5,7,0,0,569,571,5,127,0,0,570,569,1,0,0,0,570,571,
        1,0,0,0,571,572,1,0,0,0,572,574,3,50,25,0,573,566,1,0,0,0,574,577,
        1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,0,576,582,1,0,0,0,577,575,
        1,0,0,0,578,580,5,127,0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,
        1,0,0,0,581,583,3,70,35,0,582,579,1,0,0,0,582,583,1,0,0,0,583,49,
        1,0,0,0,584,585,3,174,87,0,585,586,5,127,0,0,586,587,5,53,0,0,587,
        588,5,127,0,0,588,590,1,0,0,0,589,584,1,0,0,0,589,590,1,0,0,0,590,
        591,1,0,0,0,591,592,3,180,90,0,592,51,1,0,0,0,593,594,5,63,0,0,594,
        599,3,56,28,0,595,597,5,127,0,0,596,595,1,0,0,0,596,597,1,0,0,0,
        597,598,1,0,0,0,598,600,3,70,35,0,599,596,1,0,0,0,599,600,1,0,0,
        0,600,53,1,0,0,0,601,602,5,64,0,0,602,603,3,56,28,0,603,55,1,0,0,
        0,604,606,5,127,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,
        0,0,607,609,5,65,0,0,608,605,1,0,0,0,608,609,1,0,0,0,609,610,1,0,
        0,0,610,611,5,127,0,0,611,614,3,58,29,0,612,613,5,127,0,0,613,615,
        3,62,31,0,614,612,1,0,0,0,614,615,1,0,0,0,615,618,1,0,0,0,616,617,
        5,127,0,0,617,619,3,64,32,0,618,616,1,0,0,0,618,619,1,0,0,0,619,
        622,1,0,0,0,620,621,5,127,0,0,621,623,3,66,33,0,622,620,1,0,0,0,
        622,623,1,0,0,0,623,57,1,0,0,0,624,635,5,10,0,0,625,627,5,127,0,
        0,626,625,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,630,5,7,0,
        0,629,631,5,127,0,0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,0,
        0,0,632,634,3,60,30,0,633,626,1,0,0,0,634,637,1,0,0,0,635,633,1,
        0,0,0,635,636,1,0,0,0,636,653,1,0,0,0,637,635,1,0,0,0,638,649,3,
        60,30,0,639,641,5,127,0,0,640,639,1,0,0,0,640,641,1,0,0,0,641,642,
        1,0,0,0,642,644,5,7,0,0,643,645,5,127,0,0,644,643,1,0,0,0,644,645,
        1,0,0,0,645,646,1,0,0,0,646,648,3,60,30,0,647,640,1,0,0,0,648,651,
        1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,653,1,0,0,0,651,649,
        1,0,0,0,652,624,1,0,0,0,652,638,1,0,0,0,653,59,1,0,0,0,654,655,3,
        106,53,0,655,656,5,127,0,0,656,657,5,53,0,0,657,658,5,127,0,0,658,
        659,3,180,90,0,659,662,1,0,0,0,660,662,3,106,53,0,661,654,1,0,0,
        0,661,660,1,0,0,0,662,61,1,0,0,0,663,664,5,66,0,0,664,665,5,127,
        0,0,665,666,5,67,0,0,666,667,5,127,0,0,667,678,3,68,34,0,668,670,
        5,127,0,0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,673,
        5,7,0,0,672,674,5,127,0,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,
        1,0,0,0,675,677,3,68,34,0,676,669,1,0,0,0,677,680,1,0,0,0,678,676,
        1,0,0,0,678,679,1,0,0,0,679,63,1,0,0,0,680,678,1,0,0,0,681,682,5,
        68,0,0,682,683,5,127,0,0,683,684,3,106,53,0,684,65,1,0,0,0,685,686,
        5,69,0,0,686,687,5,127,0,0,687,688,3,106,53,0,688,67,1,0,0,0,689,
        694,3,106,53,0,690,692,5,127,0,0,691,690,1,0,0,0,691,692,1,0,0,0,
        692,693,1,0,0,0,693,695,7,0,0,0,694,691,1,0,0,0,694,695,1,0,0,0,
        695,69,1,0,0,0,696,697,5,74,0,0,697,698,5,127,0,0,698,699,3,106,
        53,0,699,71,1,0,0,0,700,711,3,74,37,0,701,703,5,127,0,0,702,701,
        1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,706,5,7,0,0,705,707,
        5,127,0,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,710,
        3,74,37,0,709,702,1,0,0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,
        1,0,0,0,712,73,1,0,0,0,713,711,1,0,0,0,714,716,3,180,90,0,715,717,
        5,127,0,0,716,715,1,0,0,0,716,717,1,0,0,0,717,718,1,0,0,0,718,720,
        5,8,0,0,719,721,5,127,0,0,720,719,1,0,0,0,720,721,1,0,0,0,721,722,
        1,0,0,0,722,723,3,76,38,0,723,726,1,0,0,0,724,726,3,76,38,0,725,
        714,1,0,0,0,725,724,1,0,0,0,726,75,1,0,0,0,727,728,3,78,39,0,728,
        77,1,0,0,0,729,736,3,82,41,0,730,732,5,127,0,0,731,730,1,0,0,0,731,
        732,1,0,0,0,732,733,1,0,0,0,733,735,3,84,42,0,734,731,1,0,0,0,735,
        738,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,744,1,0,0,0,738,
        736,1,0,0,0,739,740,5,4,0,0,740,741,3,78,39,0,741,742,5,6,0,0,742,
        744,1,0,0,0,743,729,1,0,0,0,743,739,1,0,0,0,744,79,1,0,0,0,745,750,
        3,82,41,0,746,748,5,127,0,0,747,746,1,0,0,0,747,748,1,0,0,0,748,
        749,1,0,0,0,749,751,3,84,42,0,750,747,1,0,0,0,751,752,1,0,0,0,752,
        750,1,0,0,0,752,753,1,0,0,0,753,81,1,0,0,0,754,756,5,4,0,0,755,757,
        5,127,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,762,1,0,0,0,758,760,
        3,180,90,0,759,761,5,127,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,
        763,1,0,0,0,762,758,1,0,0,0,762,763,1,0,0,0,763,768,1,0,0,0,764,
        766,3,94,47,0,765,767,5,127,0,0,766,765,1,0,0,0,766,767,1,0,0,0,
        767,769,1,0,0,0,768,764,1,0,0,0,768,769,1,0,0,0,769,774,1,0,0,0,
        770,772,3,90,45,0,771,773,5,127,0,0,772,771,1,0,0,0,772,773,1,0,
        0,0,773,775,1,0,0,0,774,770,1,0,0,0,774,775,1,0,0,0,775,776,1,0,
        0,0,776,777,5,6,0,0,777,83,1,0,0,0,778,780,3,86,43,0,779,781,5,127,
        0,0,780,779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,783,3,82,
        41,0,783,85,1,0,0,0,784,786,3,206,103,0,785,787,5,127,0,0,786,785,
        1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,790,3,210,105,0,789,
        791,5,127,0,0,790,789,1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,0,792,
        794,3,88,44,0,793,792,1,0,0,0,793,794,1,0,0,0,794,796,1,0,0,0,795,
        797,5,127,0,0,796,795,1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,
        800,3,210,105,0,799,801,5,127,0,0,800,799,1,0,0,0,800,801,1,0,0,
        0,801,802,1,0,0,0,802,803,3,208,104,0,803,849,1,0,0,0,804,806,3,
        206,103,0,805,807,5,127,0,0,806,805,1,0,0,0,806,807,1,0,0,0,807,
        808,1,0,0,0,808,810,3,210,105,0,809,811,5,127,0,0,810,809,1,0,0,
        0,810,811,1,0,0,0,811,813,1,0,0,0,812,814,3,88,44,0,813,812,1,0,
        0,0,813,814,1,0,0,0,814,816,1,0,0,0,815,817,5,127,0,0,816,815,1,
        0,0,0,816,817,1,0,0,0,817,818,1,0,0,0,818,819,3,210,105,0,819,849,
        1,0,0,0,820,822,3,210,105,0,821,823,5,127,0,0,822,821,1,0,0,0,822,
        823,1,0,0,0,823,825,1,0,0,0,824,826,3,88,44,0,825,824,1,0,0,0,825,
        826,1,0,0,0,826,828,1,0,0,0,827,829,5,127,0,0,828,827,1,0,0,0,828,
        829,1,0,0,0,829,830,1,0,0,0,830,832,3,210,105,0,831,833,5,127,0,
        0,832,831,1,0,0,0,832,833,1,0,0,0,833,834,1,0,0,0,834,835,3,208,
        104,0,835,849,1,0,0,0,836,838,3,210,105,0,837,839,5,127,0,0,838,
        837,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,842,3,88,44,0,841,
        840,1,0,0,0,841,842,1,0,0,0,842,844,1,0,0,0,843,845,5,127,0,0,844,
        843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,847,3,210,105,0,
        847,849,1,0,0,0,848,784,1,0,0,0,848,804,1,0,0,0,848,820,1,0,0,0,
        848,836,1,0,0,0,849,87,1,0,0,0,850,852,5,11,0,0,851,853,5,127,0,
        0,852,851,1,0,0,0,852,853,1,0,0,0,853,858,1,0,0,0,854,856,3,180,
        90,0,855,857,5,127,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,859,1,
        0,0,0,858,854,1,0,0,0,858,859,1,0,0,0,859,864,1,0,0,0,860,862,3,
        92,46,0,861,863,5,127,0,0,862,861,1,0,0,0,862,863,1,0,0,0,863,865,
        1,0,0,0,864,860,1,0,0,0,864,865,1,0,0,0,865,867,1,0,0,0,866,868,
        3,98,49,0,867,866,1,0,0,0,867,868,1,0,0,0,868,873,1,0,0,0,869,871,
        3,90,45,0,870,872,5,127,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,
        874,1,0,0,0,873,869,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,
        876,5,12,0,0,876,89,1,0,0,0,877,880,3,194,97,0,878,880,3,198,99,
        0,879,877,1,0,0,0,879,878,1,0,0,0,880,91,1,0,0,0,881,883,5,13,0,
        0,882,884,5,127,0,0,883,882,1,0,0,0,883,884,1,0,0,0,884,885,1,0,
        0,0,885,899,3,102,51,0,886,888,5,127,0,0,887,886,1,0,0,0,887,888,
        1,0,0,0,888,889,1,0,0,0,889,891,5,5,0,0,890,892,5,13,0,0,891,890,
        1,0,0,0,891,892,1,0,0,0,892,894,1,0,0,0,893,895,5,127,0,0,894,893,
        1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,898,3,102,51,0,897,887,
        1,0,0,0,898,901,1,0,0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,93,1,
        0,0,0,901,899,1,0,0,0,902,909,3,96,48,0,903,905,5,127,0,0,904,903,
        1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,0,906,908,3,96,48,0,907,904,
        1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,0,909,910,1,0,0,0,910,95,1,
        0,0,0,911,909,1,0,0,0,912,914,5,13,0,0,913,915,5,127,0,0,914,913,
        1,0,0,0,914,915,1,0,0,0,915,916,1,0,0,0,916,917,3,100,50,0,917,97,
        1,0,0,0,918,920,5,10,0,0,919,921,5,127,0,0,920,919,1,0,0,0,920,921,
        1,0,0,0,921,926,1,0,0,0,922,924,3,188,94,0,923,925,5,127,0,0,924,
        923,1,0,0,0,924,925,1,0,0,0,925,927,1,0,0,0,926,922,1,0,0,0,926,
        927,1,0,0,0,927,938,1,0,0,0,928,930,5,14,0,0,929,931,5,127,0,0,930,
        929,1,0,0,0,930,931,1,0,0,0,931,936,1,0,0,0,932,934,3,188,94,0,933,
        935,5,127,0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,937,1,0,0,0,936,
        932,1,0,0,0,936,937,1,0,0,0,937,939,1,0,0,0,938,928,1,0,0,0,938,
        939,1,0,0,0,939,99,1,0,0,0,940,941,3,200,100,0,941,101,1,0,0,0,942,
        943,3,200,100,0,943,103,1,0,0,0,944,949,3,142,71,0,945,947,5,127,
        0,0,946,945,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,950,3,140,
        70,0,949,946,1,0,0,0,950,951,1,0,0,0,951,949,1,0,0,0,951,952,1,0,
        0,0,952,105,1,0,0,0,953,954,3,108,54,0,954,107,1,0,0,0,955,962,3,
        110,55,0,956,957,5,127,0,0,957,958,5,75,0,0,958,959,5,127,0,0,959,
        961,3,110,55,0,960,956,1,0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,962,
        963,1,0,0,0,963,109,1,0,0,0,964,962,1,0,0,0,965,972,3,112,56,0,966,
        967,5,127,0,0,967,968,5,76,0,0,968,969,5,127,0,0,969,971,3,112,56,
        0,970,966,1,0,0,0,971,974,1,0,0,0,972,970,1,0,0,0,972,973,1,0,0,
        0,973,111,1,0,0,0,974,972,1,0,0,0,975,982,3,114,57,0,976,977,5,127,
        0,0,977,978,5,77,0,0,978,979,5,127,0,0,979,981,3,114,57,0,980,976,
        1,0,0,0,981,984,1,0,0,0,982,980,1,0,0,0,982,983,1,0,0,0,983,113,
        1,0,0,0,984,982,1,0,0,0,985,987,5,78,0,0,986,988,5,127,0,0,987,986,
        1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,0,989,985,1,0,0,0,990,993,
        1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,992,994,1,0,0,0,993,991,
        1,0,0,0,994,995,3,116,58,0,995,115,1,0,0,0,996,1003,3,120,60,0,997,
        999,5,127,0,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1000,1,0,0,0,1000,
        1002,3,118,59,0,1001,998,1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,
        0,0,1003,1004,1,0,0,0,1004,117,1,0,0,0,1005,1003,1,0,0,0,1006,1008,
        5,8,0,0,1007,1009,5,127,0,0,1008,1007,1,0,0,0,1008,1009,1,0,0,0,
        1009,1010,1,0,0,0,1010,1042,3,120,60,0,1011,1013,5,15,0,0,1012,1014,
        5,127,0,0,1013,1012,1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,
        1015,1042,3,120,60,0,1016,1018,5,16,0,0,1017,1019,5,127,0,0,1018,
        1017,1,0,0,0,1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,1042,3,120,
        60,0,1021,1023,5,17,0,0,1022,1024,5,127,0,0,1023,1022,1,0,0,0,1023,
        1024,1,0,0,0,1024,1025,1,0,0,0,1025,1042,3,120,60,0,1026,1028,5,
        18,0,0,1027,1029,5,127,0,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,
        1030,1,0,0,0,1030,1042,3,120,60,0,1031,1033,5,19,0,0,1032,1034,5,
        127,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1035,1,0,0,0,1035,
        1042,3,120,60,0,1036,1038,5,20,0,0,1037,1039,5,127,0,0,1038,1037,
        1,0,0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,3,120,60,0,
        1041,1006,1,0,0,0,1041,1011,1,0,0,0,1041,1016,1,0,0,0,1041,1021,
        1,0,0,0,1041,1026,1,0,0,0,1041,1031,1,0,0,0,1041,1036,1,0,0,0,1042,
        119,1,0,0,0,1043,1049,3,128,64,0,1044,1048,3,122,61,0,1045,1048,
        3,124,62,0,1046,1048,3,126,63,0,1047,1044,1,0,0,0,1047,1045,1,0,
        0,0,1047,1046,1,0,0,0,1048,1051,1,0,0,0,1049,1047,1,0,0,0,1049,1050,
        1,0,0,0,1050,121,1,0,0,0,1051,1049,1,0,0,0,1052,1053,5,127,0,0,1053,
        1054,5,79,0,0,1054,1055,5,127,0,0,1055,1063,5,63,0,0,1056,1057,5,
        127,0,0,1057,1058,5,80,0,0,1058,1059,5,127,0,0,1059,1063,5,63,0,
        0,1060,1061,5,127,0,0,1061,1063,5,81,0,0,1062,1052,1,0,0,0,1062,
        1056,1,0,0,0,1062,1060,1,0,0,0,1063,1065,1,0,0,0,1064,1066,5,127,
        0,0,1065,1064,1,0,0,0,1065,1066,1,0,0,0,1066,1067,1,0,0,0,1067,1068,
        3,128,64,0,1068,123,1,0,0,0,1069,1070,5,127,0,0,1070,1072,5,82,0,
        0,1071,1073,5,127,0,0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,
        1,0,0,0,1074,1075,3,128,64,0,1075,125,1,0,0,0,1076,1077,5,127,0,
        0,1077,1078,5,83,0,0,1078,1079,5,127,0,0,1079,1087,5,84,0,0,1080,
        1081,5,127,0,0,1081,1082,5,83,0,0,1082,1083,5,127,0,0,1083,1084,
        5,78,0,0,1084,1085,5,127,0,0,1085,1087,5,84,0,0,1086,1076,1,0,0,
        0,1086,1080,1,0,0,0,1087,127,1,0,0,0,1088,1107,3,130,65,0,1089,1091,
        5,127,0,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,
        1092,1094,5,21,0,0,1093,1095,5,127,0,0,1094,1093,1,0,0,0,1094,1095,
        1,0,0,0,1095,1096,1,0,0,0,1096,1106,3,130,65,0,1097,1099,5,127,0,
        0,1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1100,1,0,0,0,1100,1102,
        5,22,0,0,1101,1103,5,127,0,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,
        1103,1104,1,0,0,0,1104,1106,3,130,65,0,1105,1090,1,0,0,0,1105,1098,
        1,0,0,0,1106,1109,1,0,0,0,1107,1105,1,0,0,0,1107,1108,1,0,0,0,1108,
        129,1,0,0,0,1109,1107,1,0,0,0,1110,1137,3,132,66,0,1111,1113,5,127,
        0,0,1112,1111,1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,0,0,0,1114,1116,
        5,10,0,0,1115,1117,5,127,0,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,
        1117,1118,1,0,0,0,1118,1136,3,132,66,0,1119,1121,5,127,0,0,1120,
        1119,1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1124,5,23,
        0,0,1123,1125,5,127,0,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,1125,
        1126,1,0,0,0,1126,1136,3,132,66,0,1127,1129,5,127,0,0,1128,1127,
        1,0,0,0,1128,1129,1,0,0,0,1129,1130,1,0,0,0,1130,1132,5,24,0,0,1131,
        1133,5,127,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,
        0,0,1134,1136,3,132,66,0,1135,1112,1,0,0,0,1135,1120,1,0,0,0,1135,
        1128,1,0,0,0,1136,1139,1,0,0,0,1137,1135,1,0,0,0,1137,1138,1,0,0,
        0,1138,131,1,0,0,0,1139,1137,1,0,0,0,1140,1151,3,134,67,0,1141,1143,
        5,127,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,0,0,
        1144,1146,5,25,0,0,1145,1147,5,127,0,0,1146,1145,1,0,0,0,1146,1147,
        1,0,0,0,1147,1148,1,0,0,0,1148,1150,3,134,67,0,1149,1142,1,0,0,0,
        1150,1153,1,0,0,0,1151,1149,1,0,0,0,1151,1152,1,0,0,0,1152,133,1,
        0,0,0,1153,1151,1,0,0,0,1154,1161,3,136,68,0,1155,1157,7,1,0,0,1156,
        1158,5,127,0,0,1157,1156,1,0,0,0,1157,1158,1,0,0,0,1158,1159,1,0,
        0,0,1159,1161,3,136,68,0,1160,1154,1,0,0,0,1160,1155,1,0,0,0,1161,
        135,1,0,0,0,1162,1184,3,138,69,0,1163,1165,5,127,0,0,1164,1163,1,
        0,0,0,1164,1165,1,0,0,0,1165,1166,1,0,0,0,1166,1167,5,11,0,0,1167,
        1168,3,106,53,0,1168,1169,5,12,0,0,1169,1183,1,0,0,0,1170,1172,5,
        127,0,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,1173,1,0,0,0,1173,
        1175,5,11,0,0,1174,1176,3,106,53,0,1175,1174,1,0,0,0,1175,1176,1,
        0,0,0,1176,1177,1,0,0,0,1177,1179,5,14,0,0,1178,1180,3,106,53,0,
        1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,1181,1,0,0,0,1181,1183,
        5,12,0,0,1182,1164,1,0,0,0,1182,1171,1,0,0,0,1183,1186,1,0,0,0,1184,
        1182,1,0,0,0,1184,1185,1,0,0,0,1185,137,1,0,0,0,1186,1184,1,0,0,
        0,1187,1194,3,142,71,0,1188,1190,5,127,0,0,1189,1188,1,0,0,0,1189,
        1190,1,0,0,0,1190,1191,1,0,0,0,1191,1193,3,140,70,0,1192,1189,1,
        0,0,0,1193,1196,1,0,0,0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,
        1201,1,0,0,0,1196,1194,1,0,0,0,1197,1199,5,127,0,0,1198,1197,1,0,
        0,0,1198,1199,1,0,0,0,1199,1200,1,0,0,0,1200,1202,3,94,47,0,1201,
        1198,1,0,0,0,1201,1202,1,0,0,0,1202,139,1,0,0,0,1203,1205,5,26,0,
        0,1204,1206,5,127,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,
        1,0,0,0,1207,1208,3,196,98,0,1208,141,1,0,0,0,1209,1235,3,182,91,
        0,1210,1235,3,198,99,0,1211,1235,3,144,72,0,1212,1214,5,85,0,0,1213,
        1215,5,127,0,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1216,1,0,
        0,0,1216,1218,5,4,0,0,1217,1219,5,127,0,0,1218,1217,1,0,0,0,1218,
        1219,1,0,0,0,1219,1220,1,0,0,0,1220,1222,5,10,0,0,1221,1223,5,127,
        0,0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,1224,1,0,0,0,1224,1235,
        5,6,0,0,1225,1235,3,148,74,0,1226,1235,3,150,75,0,1227,1235,3,152,
        76,0,1228,1235,3,156,78,0,1229,1235,3,158,79,0,1230,1235,3,162,81,
        0,1231,1235,3,166,83,0,1232,1235,3,168,84,0,1233,1235,3,180,90,0,
        1234,1209,1,0,0,0,1234,1210,1,0,0,0,1234,1211,1,0,0,0,1234,1212,
        1,0,0,0,1234,1225,1,0,0,0,1234,1226,1,0,0,0,1234,1227,1,0,0,0,1234,
        1228,1,0,0,0,1234,1229,1,0,0,0,1234,1230,1,0,0,0,1234,1231,1,0,0,
        0,1234,1232,1,0,0,0,1234,1233,1,0,0,0,1235,143,1,0,0,0,1236,1241,
        5,86,0,0,1237,1239,5,127,0,0,1238,1237,1,0,0,0,1238,1239,1,0,0,0,
        1239,1240,1,0,0,0,1240,1242,3,146,73,0,1241,1238,1,0,0,0,1242,1243,
        1,0,0,0,1243,1241,1,0,0,0,1243,1244,1,0,0,0,1244,1259,1,0,0,0,1245,
        1247,5,86,0,0,1246,1248,5,127,0,0,1247,1246,1,0,0,0,1247,1248,1,
        0,0,0,1248,1249,1,0,0,0,1249,1254,3,106,53,0,1250,1252,5,127,0,0,
        1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1253,1,0,0,0,1253,1255,
        3,146,73,0,1254,1251,1,0,0,0,1255,1256,1,0,0,0,1256,1254,1,0,0,0,
        1256,1257,1,0,0,0,1257,1259,1,0,0,0,1258,1236,1,0,0,0,1258,1245,
        1,0,0,0,1259,1268,1,0,0,0,1260,1262,5,127,0,0,1261,1260,1,0,0,0,
        1261,1262,1,0,0,0,1262,1263,1,0,0,0,1263,1265,5,87,0,0,1264,1266,
        5,127,0,0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,1266,1267,1,0,0,0,
        1267,1269,3,106,53,0,1268,1261,1,0,0,0,1268,1269,1,0,0,0,1269,1271,
        1,0,0,0,1270,1272,5,127,0,0,1271,1270,1,0,0,0,1271,1272,1,0,0,0,
        1272,1273,1,0,0,0,1273,1274,5,88,0,0,1274,145,1,0,0,0,1275,1277,
        5,89,0,0,1276,1278,5,127,0,0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,
        1278,1279,1,0,0,0,1279,1281,3,106,53,0,1280,1282,5,127,0,0,1281,
        1280,1,0,0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1285,5,90,
        0,0,1284,1286,5,127,0,0,1285,1284,1,0,0,0,1285,1286,1,0,0,0,1286,
        1287,1,0,0,0,1287,1288,3,106,53,0,1288,147,1,0,0,0,1289,1291,5,11,
        0,0,1290,1292,5,127,0,0,1291,1290,1,0,0,0,1291,1292,1,0,0,0,1292,
        1293,1,0,0,0,1293,1302,3,154,77,0,1294,1296,5,127,0,0,1295,1294,
        1,0,0,0,1295,1296,1,0,0,0,1296,1297,1,0,0,0,1297,1299,5,5,0,0,1298,
        1300,5,127,0,0,1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,1301,1,0,
        0,0,1301,1303,3,106,53,0,1302,1295,1,0,0,0,1302,1303,1,0,0,0,1303,
        1305,1,0,0,0,1304,1306,5,127,0,0,1305,1304,1,0,0,0,1305,1306,1,0,
        0,0,1306,1307,1,0,0,0,1307,1308,5,12,0,0,1308,149,1,0,0,0,1309,1311,
        5,11,0,0,1310,1312,5,127,0,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,
        1312,1321,1,0,0,0,1313,1315,3,180,90,0,1314,1316,5,127,0,0,1315,
        1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1319,5,8,0,
        0,1318,1320,5,127,0,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,1322,
        1,0,0,0,1321,1313,1,0,0,0,1321,1322,1,0,0,0,1322,1323,1,0,0,0,1323,
        1325,3,80,40,0,1324,1326,5,127,0,0,1325,1324,1,0,0,0,1325,1326,1,
        0,0,0,1326,1331,1,0,0,0,1327,1329,3,70,35,0,1328,1330,5,127,0,0,
        1329,1328,1,0,0,0,1329,1330,1,0,0,0,1330,1332,1,0,0,0,1331,1327,
        1,0,0,0,1331,1332,1,0,0,0,1332,1333,1,0,0,0,1333,1335,5,5,0,0,1334,
        1336,5,127,0,0,1335,1334,1,0,0,0,1335,1336,1,0,0,0,1336,1337,1,0,
        0,0,1337,1339,3,106,53,0,1338,1340,5,127,0,0,1339,1338,1,0,0,0,1339,
        1340,1,0,0,0,1340,1341,1,0,0,0,1341,1342,5,12,0,0,1342,151,1,0,0,
        0,1343,1345,5,48,0,0,1344,1346,5,127,0,0,1345,1344,1,0,0,0,1345,
        1346,1,0,0,0,1346,1347,1,0,0,0,1347,1349,5,4,0,0,1348,1350,5,127,
        0,0,1349,1348,1,0,0,0,1349,1350,1,0,0,0,1350,1351,1,0,0,0,1351,1353,
        3,154,77,0,1352,1354,5,127,0,0,1353,1352,1,0,0,0,1353,1354,1,0,0,
        0,1354,1355,1,0,0,0,1355,1356,5,6,0,0,1356,1400,1,0,0,0,1357,1359,
        5,91,0,0,1358,1360,5,127,0,0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,
        1360,1361,1,0,0,0,1361,1363,5,4,0,0,1362,1364,5,127,0,0,1363,1362,
        1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,0,1365,1367,3,154,77,0,
        1366,1368,5,127,0,0,1367,1366,1,0,0,0,1367,1368,1,0,0,0,1368,1369,
        1,0,0,0,1369,1370,5,6,0,0,1370,1400,1,0,0,0,1371,1373,5,92,0,0,1372,
        1374,5,127,0,0,1373,1372,1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,
        0,0,1375,1377,5,4,0,0,1376,1378,5,127,0,0,1377,1376,1,0,0,0,1377,
        1378,1,0,0,0,1378,1379,1,0,0,0,1379,1381,3,154,77,0,1380,1382,5,
        127,0,0,1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,1383,1,0,0,0,1383,
        1384,5,6,0,0,1384,1400,1,0,0,0,1385,1387,5,93,0,0,1386,1388,5,127,
        0,0,1387,1386,1,0,0,0,1387,1388,1,0,0,0,1388,1389,1,0,0,0,1389,1391,
        5,4,0,0,1390,1392,5,127,0,0,1391,1390,1,0,0,0,1391,1392,1,0,0,0,
        1392,1393,1,0,0,0,1393,1395,3,154,77,0,1394,1396,5,127,0,0,1395,
        1394,1,0,0,0,1395,1396,1,0,0,0,1396,1397,1,0,0,0,1397,1398,5,6,0,
        0,1398,1400,1,0,0,0,1399,1343,1,0,0,0,1399,1357,1,0,0,0,1399,1371,
        1,0,0,0,1399,1385,1,0,0,0,1400,153,1,0,0,0,1401,1406,3,160,80,0,
        1402,1404,5,127,0,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,1405,
        1,0,0,0,1405,1407,3,70,35,0,1406,1403,1,0,0,0,1406,1407,1,0,0,0,
        1407,155,1,0,0,0,1408,1409,3,80,40,0,1409,157,1,0,0,0,1410,1412,
        5,4,0,0,1411,1413,5,127,0,0,1412,1411,1,0,0,0,1412,1413,1,0,0,0,
        1413,1414,1,0,0,0,1414,1416,3,106,53,0,1415,1417,5,127,0,0,1416,
        1415,1,0,0,0,1416,1417,1,0,0,0,1417,1418,1,0,0,0,1418,1419,5,6,0,
        0,1419,159,1,0,0,0,1420,1421,3,180,90,0,1421,1422,5,127,0,0,1422,
        1423,5,82,0,0,1423,1424,5,127,0,0,1424,1425,3,106,53,0,1425,161,
        1,0,0,0,1426,1428,3,164,82,0,1427,1429,5,127,0,0,1428,1427,1,0,0,
        0,1428,1429,1,0,0,0,1429,1430,1,0,0,0,1430,1432,5,4,0,0,1431,1433,
        5,127,0,0,1432,1431,1,0,0,0,1432,1433,1,0,0,0,1433,1438,1,0,0,0,
        1434,1436,5,65,0,0,1435,1437,5,127,0,0,1436,1435,1,0,0,0,1436,1437,
        1,0,0,0,1437,1439,1,0,0,0,1438,1434,1,0,0,0,1438,1439,1,0,0,0,1439,
        1457,1,0,0,0,1440,1442,3,106,53,0,1441,1443,5,127,0,0,1442,1441,
        1,0,0,0,1442,1443,1,0,0,0,1443,1454,1,0,0,0,1444,1446,5,7,0,0,1445,
        1447,5,127,0,0,1446,1445,1,0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,
        0,0,1448,1450,3,106,53,0,1449,1451,5,127,0,0,1450,1449,1,0,0,0,1450,
        1451,1,0,0,0,1451,1453,1,0,0,0,1452,1444,1,0,0,0,1453,1456,1,0,0,
        0,1454,1452,1,0,0,0,1454,1455,1,0,0,0,1455,1458,1,0,0,0,1456,1454,
        1,0,0,0,1457,1440,1,0,0,0,1457,1458,1,0,0,0,1458,1459,1,0,0,0,1459,
        1460,5,6,0,0,1460,163,1,0,0,0,1461,1462,3,178,89,0,1462,1463,3,204,
        102,0,1463,165,1,0,0,0,1464,1466,5,94,0,0,1465,1467,5,127,0,0,1466,
        1465,1,0,0,0,1466,1467,1,0,0,0,1467,1468,1,0,0,0,1468,1470,5,2,0,
        0,1469,1471,5,127,0,0,1470,1469,1,0,0,0,1470,1471,1,0,0,0,1471,1491,
        1,0,0,0,1472,1492,3,6,3,0,1473,1478,3,72,36,0,1474,1476,5,127,0,
        0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,1476,1477,1,0,0,0,1477,1479,
        3,70,35,0,1478,1475,1,0,0,0,1478,1479,1,0,0,0,1479,1492,1,0,0,0,
        1480,1483,3,18,9,0,1481,1483,3,52,26,0,1482,1480,1,0,0,0,1482,1481,
        1,0,0,0,1483,1485,1,0,0,0,1484,1486,5,127,0,0,1485,1484,1,0,0,0,
        1485,1486,1,0,0,0,1486,1488,1,0,0,0,1487,1482,1,0,0,0,1488,1489,
        1,0,0,0,1489,1487,1,0,0,0,1489,1490,1,0,0,0,1490,1492,1,0,0,0,1491,
        1472,1,0,0,0,1491,1473,1,0,0,0,1491,1487,1,0,0,0,1492,1494,1,0,0,
        0,1493,1495,5,127,0,0,1494,1493,1,0,0,0,1494,1495,1,0,0,0,1495,1496,
        1,0,0,0,1496,1497,5,3,0,0,1497,167,1,0,0,0,1498,1500,5,85,0,0,1499,
        1501,5,127,0,0,1500,1499,1,0,0,0,1500,1501,1,0,0,0,1501,1502,1,0,
        0,0,1502,1504,5,2,0,0,1503,1505,5,127,0,0,1504,1503,1,0,0,0,1504,
        1505,1,0,0,0,1505,1525,1,0,0,0,1506,1526,3,6,3,0,1507,1512,3,72,
        36,0,1508,1510,5,127,0,0,1509,1508,1,0,0,0,1509,1510,1,0,0,0,1510,
        1511,1,0,0,0,1511,1513,3,70,35,0,1512,1509,1,0,0,0,1512,1513,1,0,
        0,0,1513,1526,1,0,0,0,1514,1517,3,18,9,0,1515,1517,3,52,26,0,1516,
        1514,1,0,0,0,1516,1515,1,0,0,0,1517,1519,1,0,0,0,1518,1520,5,127,
        0,0,1519,1518,1,0,0,0,1519,1520,1,0,0,0,1520,1522,1,0,0,0,1521,1516,
        1,0,0,0,1522,1523,1,0,0,0,1523,1521,1,0,0,0,1523,1524,1,0,0,0,1524,
        1526,1,0,0,0,1525,1506,1,0,0,0,1525,1507,1,0,0,0,1525,1521,1,0,0,
        0,1526,1528,1,0,0,0,1527,1529,5,127,0,0,1528,1527,1,0,0,0,1528,1529,
        1,0,0,0,1529,1530,1,0,0,0,1530,1531,5,3,0,0,1531,169,1,0,0,0,1532,
        1534,3,176,88,0,1533,1535,5,127,0,0,1534,1533,1,0,0,0,1534,1535,
        1,0,0,0,1535,1536,1,0,0,0,1536,1538,5,4,0,0,1537,1539,5,127,0,0,
        1538,1537,1,0,0,0,1538,1539,1,0,0,0,1539,1557,1,0,0,0,1540,1542,
        3,106,53,0,1541,1543,5,127,0,0,1542,1541,1,0,0,0,1542,1543,1,0,0,
        0,1543,1554,1,0,0,0,1544,1546,5,7,0,0,1545,1547,5,127,0,0,1546,1545,
        1,0,0,0,1546,1547,1,0,0,0,1547,1548,1,0,0,0,1548,1550,3,106,53,0,
        1549,1551,5,127,0,0,1550,1549,1,0,0,0,1550,1551,1,0,0,0,1551,1553,
        1,0,0,0,1552,1544,1,0,0,0,1553,1556,1,0,0,0,1554,1552,1,0,0,0,1554,
        1555,1,0,0,0,1555,1558,1,0,0,0,1556,1554,1,0,0,0,1557,1540,1,0,0,
        0,1557,1558,1,0,0,0,1558,1559,1,0,0,0,1559,1560,5,6,0,0,1560,171,
        1,0,0,0,1561,1562,3,176,88,0,1562,173,1,0,0,0,1563,1564,3,204,102,
        0,1564,175,1,0,0,0,1565,1566,3,178,89,0,1566,1567,3,204,102,0,1567,
        177,1,0,0,0,1568,1569,3,204,102,0,1569,1570,5,26,0,0,1570,1572,1,
        0,0,0,1571,1568,1,0,0,0,1572,1575,1,0,0,0,1573,1571,1,0,0,0,1573,
        1574,1,0,0,0,1574,179,1,0,0,0,1575,1573,1,0,0,0,1576,1577,3,204,
        102,0,1577,181,1,0,0,0,1578,1585,3,184,92,0,1579,1585,5,84,0,0,1580,
        1585,3,186,93,0,1581,1585,5,109,0,0,1582,1585,3,192,96,0,1583,1585,
        3,194,97,0,1584,1578,1,0,0,0,1584,1579,1,0,0,0,1584,1580,1,0,0,0,
        1584,1581,1,0,0,0,1584,1582,1,0,0,0,1584,1583,1,0,0,0,1585,183,1,
        0,0,0,1586,1587,7,2,0,0,1587,185,1,0,0,0,1588,1591,3,190,95,0,1589,
        1591,3,188,94,0,1590,1588,1,0,0,0,1590,1589,1,0,0,0,1591,187,1,0,
        0,0,1592,1593,7,3,0,0,1593,189,1,0,0,0,1594,1595,7,4,0,0,1595,191,
        1,0,0,0,1596,1598,5,11,0,0,1597,1599,5,127,0,0,1598,1597,1,0,0,0,
        1598,1599,1,0,0,0,1599,1617,1,0,0,0,1600,1602,3,106,53,0,1601,1603,
        5,127,0,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,1614,1,0,0,0,
        1604,1606,5,7,0,0,1605,1607,5,127,0,0,1606,1605,1,0,0,0,1606,1607,
        1,0,0,0,1607,1608,1,0,0,0,1608,1610,3,106,53,0,1609,1611,5,127,0,
        0,1610,1609,1,0,0,0,1610,1611,1,0,0,0,1611,1613,1,0,0,0,1612,1604,
        1,0,0,0,1613,1616,1,0,0,0,1614,1612,1,0,0,0,1614,1615,1,0,0,0,1615,
        1618,1,0,0,0,1616,1614,1,0,0,0,1617,1600,1,0,0,0,1617,1618,1,0,0,
        0,1618,1619,1,0,0,0,1619,1620,5,12,0,0,1620,193,1,0,0,0,1621,1623,
        5,2,0,0,1622,1624,5,127,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,
        1624,1658,1,0,0,0,1625,1627,3,196,98,0,1626,1628,5,127,0,0,1627,
        1626,1,0,0,0,1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,1631,5,13,
        0,0,1630,1632,5,127,0,0,1631,1630,1,0,0,0,1631,1632,1,0,0,0,1632,
        1633,1,0,0,0,1633,1635,3,106,53,0,1634,1636,5,127,0,0,1635,1634,
        1,0,0,0,1635,1636,1,0,0,0,1636,1655,1,0,0,0,1637,1639,5,7,0,0,1638,
        1640,5,127,0,0,1639,1638,1,0,0,0,1639,1640,1,0,0,0,1640,1641,1,0,
        0,0,1641,1643,3,196,98,0,1642,1644,5,127,0,0,1643,1642,1,0,0,0,1643,
        1644,1,0,0,0,1644,1645,1,0,0,0,1645,1647,5,13,0,0,1646,1648,5,127,
        0,0,1647,1646,1,0,0,0,1647,1648,1,0,0,0,1648,1649,1,0,0,0,1649,1651,
        3,106,53,0,1650,1652,5,127,0,0,1651,1650,1,0,0,0,1651,1652,1,0,0,
        0,1652,1654,1,0,0,0,1653,1637,1,0,0,0,1654,1657,1,0,0,0,1655,1653,
        1,0,0,0,1655,1656,1,0,0,0,1656,1659,1,0,0,0,1657,1655,1,0,0,0,1658,
        1625,1,0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,0,0,1660,1661,5,3,0,
        0,1661,195,1,0,0,0,1662,1663,3,200,100,0,1663,197,1,0,0,0,1664,1667,
        5,27,0,0,1665,1668,3,204,102,0,1666,1668,5,98,0,0,1667,1665,1,0,
        0,0,1667,1666,1,0,0,0,1668,199,1,0,0,0,1669,1672,3,204,102,0,1670,
        1672,3,202,101,0,1671,1669,1,0,0,0,1671,1670,1,0,0,0,1672,201,1,
        0,0,0,1673,1674,7,5,0,0,1674,203,1,0,0,0,1675,1676,7,6,0,0,1676,
        205,1,0,0,0,1677,1678,7,7,0,0,1678,207,1,0,0,0,1679,1680,7,8,0,0,
        1680,209,1,0,0,0,1681,1682,7,9,0,0,1682,211,1,0,0,0,315,213,217,
        220,223,231,235,240,247,252,255,259,263,267,273,277,282,287,291,
        294,296,300,304,309,313,318,322,333,339,343,347,351,354,358,362,
        366,372,376,380,384,388,392,398,408,415,428,432,438,442,446,451,
        456,460,466,470,476,480,486,490,494,498,502,506,511,518,522,527,
        534,540,545,551,554,560,562,566,570,575,579,582,589,596,599,605,
        608,614,618,622,626,630,635,640,644,649,652,661,669,673,678,691,
        694,702,706,711,716,720,725,731,736,743,747,752,756,760,762,766,
        768,772,774,780,786,790,793,796,800,806,810,813,816,822,825,828,
        832,838,841,844,848,852,856,858,862,864,867,871,873,879,883,887,
        891,894,899,904,909,914,920,924,926,930,934,936,938,946,951,962,
        972,982,987,991,998,1003,1008,1013,1018,1023,1028,1033,1038,1041,
        1047,1049,1062,1065,1072,1086,1090,1094,1098,1102,1105,1107,1112,
        1116,1120,1124,1128,1132,1135,1137,1142,1146,1151,1157,1160,1164,
        1171,1175,1179,1182,1184,1189,1194,1198,1201,1205,1214,1218,1222,
        1234,1238,1243,1247,1251,1256,1258,1261,1265,1268,1271,1277,1281,
        1285,1291,1295,1299,1302,1305,1311,1315,1319,1321,1325,1329,1331,
        1335,1339,1345,1349,1353,1359,1363,1367,1373,1377,1381,1387,1391,
        1395,1399,1403,1406,1412,1416,1428,1432,1436,1438,1442,1446,1450,
        1454,1457,1466,1470,1475,1478,1482,1485,1489,1491,1494,1500,1504,
        1509,1512,1516,1519,1523,1525,1528,1534,1538,1542,1546,1550,1554,
        1557,1573,1584,1590,1598,1602,1606,1610,1614,1617,1623,1627,1631,
        1635,1639,1643,1647,1651,1655,1658,1667,1671
    ]

class CypherParser ( Parser ):

    grammarFileName = "Cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'{'", "'}'", "'('", "'|'", "')'", 
                     "','", "'='", "'+='", "'*'", "'['", "']'", "':'", "'..'", 
                     "'<>'", "'<'", "'>'", "'<='", "'>='", "'=~'", "'+'", 
                     "'-'", "'/'", "'%'", "'^'", "'.'", "'$'", "'\\u27E8'", 
                     "'\\u3008'", "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", 
                     "'\\u3009'", "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", 
                     "'\\u2010'", "'\\u2011'", "'\\u2012'", "'\\u2013'", 
                     "'\\u2014'", "'\\u2015'", "'\\u2212'", "'\\uFE58'", 
                     "'\\uFE63'", "'\\uFF0D'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "UNION", "ALL", 
                      "OPTIONAL", "MATCH", "FOREACH", "UNWIND", "AS", "MERGE", 
                      "ON", "CREATE", "SET", "DETACH", "DELETE", "REMOVE", 
                      "CALL", "YIELD", "WITH", "RETURN", "DISTINCT", "ORDER", 
                      "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", 
                      "DESC", "WHERE", "OR", "XOR", "AND", "NOT", "STARTS", 
                      "ENDS", "CONTAINS", "IN", "IS", "NULL", "COUNT", "CASE", 
                      "ELSE", "END", "WHEN", "THEN", "ANY", "NONE", "SINGLE", 
                      "EXISTS", "TRUE", "FALSE", "HexInteger", "DecimalInteger", 
                      "OctalInteger", "HexLetter", "HexDigit", "Digit", 
                      "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", 
                      "ExponentDecimalReal", "RegularDecimalReal", "StringLiteral", 
                      "EscapedChar", "CONSTRAINT", "DO", "FOR", "REQUIRE", 
                      "UNIQUE", "MANDATORY", "SCALAR", "OF", "ADD", "DROP", 
                      "FILTER", "EXTRACT", "UnescapedSymbolicName", "IdentifierStart", 
                      "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", 
                      "Comment" ]

    RULE_oC_Cypher = 0
    RULE_oC_Statement = 1
    RULE_oC_Query = 2
    RULE_oC_RegularQuery = 3
    RULE_oC_Union = 4
    RULE_oC_SingleQuery = 5
    RULE_oC_SinglePartQuery = 6
    RULE_oC_MultiPartQuery = 7
    RULE_oC_UpdatingClause = 8
    RULE_oC_ReadingClause = 9
    RULE_oC_Match = 10
    RULE_oC_CallSubquery = 11
    RULE_oC_Foreach = 12
    RULE_oC_Unwind = 13
    RULE_oC_Merge = 14
    RULE_oC_MergeAction = 15
    RULE_oC_Create = 16
    RULE_oC_Set = 17
    RULE_oC_SetItem = 18
    RULE_oC_Delete = 19
    RULE_oC_Remove = 20
    RULE_oC_RemoveItem = 21
    RULE_oC_InQueryCall = 22
    RULE_oC_StandaloneCall = 23
    RULE_oC_YieldItems = 24
    RULE_oC_YieldItem = 25
    RULE_oC_With = 26
    RULE_oC_Return = 27
    RULE_oC_ProjectionBody = 28
    RULE_oC_ProjectionItems = 29
    RULE_oC_ProjectionItem = 30
    RULE_oC_Order = 31
    RULE_oC_Skip = 32
    RULE_oC_Limit = 33
    RULE_oC_SortItem = 34
    RULE_oC_Where = 35
    RULE_oC_Pattern = 36
    RULE_oC_PatternPart = 37
    RULE_oC_AnonymousPatternPart = 38
    RULE_oC_PatternElement = 39
    RULE_oC_RelationshipsPattern = 40
    RULE_oC_NodePattern = 41
    RULE_oC_PatternElementChain = 42
    RULE_oC_RelationshipPattern = 43
    RULE_oC_RelationshipDetail = 44
    RULE_oC_Properties = 45
    RULE_oC_RelationshipTypes = 46
    RULE_oC_NodeLabels = 47
    RULE_oC_NodeLabel = 48
    RULE_oC_RangeLiteral = 49
    RULE_oC_LabelName = 50
    RULE_oC_RelTypeName = 51
    RULE_oC_PropertyExpression = 52
    RULE_oC_Expression = 53
    RULE_oC_OrExpression = 54
    RULE_oC_XorExpression = 55
    RULE_oC_AndExpression = 56
    RULE_oC_NotExpression = 57
    RULE_oC_ComparisonExpression = 58
    RULE_oC_PartialComparisonExpression = 59
    RULE_oC_StringListNullPredicateExpression = 60
    RULE_oC_StringPredicateExpression = 61
    RULE_oC_ListPredicateExpression = 62
    RULE_oC_NullPredicateExpression = 63
    RULE_oC_AddOrSubtractExpression = 64
    RULE_oC_MultiplyDivideModuloExpression = 65
    RULE_oC_PowerOfExpression = 66
    RULE_oC_UnaryAddOrSubtractExpression = 67
    RULE_oC_ListOperatorExpression = 68
    RULE_oC_PropertyOrLabelsExpression = 69
    RULE_oC_PropertyLookup = 70
    RULE_oC_Atom = 71
    RULE_oC_CaseExpression = 72
    RULE_oC_CaseAlternative = 73
    RULE_oC_ListComprehension = 74
    RULE_oC_PatternComprehension = 75
    RULE_oC_Quantifier = 76
    RULE_oC_FilterExpression = 77
    RULE_oC_PatternPredicate = 78
    RULE_oC_ParenthesizedExpression = 79
    RULE_oC_IdInColl = 80
    RULE_oC_FunctionInvocation = 81
    RULE_oC_FunctionName = 82
    RULE_oC_ExistentialSubquery = 83
    RULE_oC_CountSubquery = 84
    RULE_oC_ExplicitProcedureInvocation = 85
    RULE_oC_ImplicitProcedureInvocation = 86
    RULE_oC_ProcedureResultField = 87
    RULE_oC_ProcedureName = 88
    RULE_oC_Namespace = 89
    RULE_oC_Variable = 90
    RULE_oC_Literal = 91
    RULE_oC_BooleanLiteral = 92
    RULE_oC_NumberLiteral = 93
    RULE_oC_IntegerLiteral = 94
    RULE_oC_DoubleLiteral = 95
    RULE_oC_ListLiteral = 96
    RULE_oC_MapLiteral = 97
    RULE_oC_PropertyKeyName = 98
    RULE_oC_Parameter = 99
    RULE_oC_SchemaName = 100
    RULE_oC_ReservedWord = 101
    RULE_oC_SymbolicName = 102
    RULE_oC_LeftArrowHead = 103
    RULE_oC_RightArrowHead = 104
    RULE_oC_Dash = 105

    ruleNames =  [ "oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", 
                   "oC_CallSubquery", "oC_Foreach", "oC_Unwind", "oC_Merge", 
                   "oC_MergeAction", "oC_Create", "oC_Set", "oC_SetItem", 
                   "oC_Delete", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", 
                   "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", 
                   "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", 
                   "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", 
                   "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", 
                   "oC_AnonymousPatternPart", "oC_PatternElement", "oC_RelationshipsPattern", 
                   "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", 
                   "oC_RelationshipDetail", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_PropertyExpression", "oC_Expression", 
                   "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", 
                   "oC_NotExpression", "oC_ComparisonExpression", "oC_PartialComparisonExpression", 
                   "oC_StringListNullPredicateExpression", "oC_StringPredicateExpression", 
                   "oC_ListPredicateExpression", "oC_NullPredicateExpression", 
                   "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", 
                   "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", 
                   "oC_ListOperatorExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_PropertyLookup", "oC_Atom", "oC_CaseExpression", 
                   "oC_CaseAlternative", "oC_ListComprehension", "oC_PatternComprehension", 
                   "oC_Quantifier", "oC_FilterExpression", "oC_PatternPredicate", 
                   "oC_ParenthesizedExpression", "oC_IdInColl", "oC_FunctionInvocation", 
                   "oC_FunctionName", "oC_ExistentialSubquery", "oC_CountSubquery", 
                   "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation", 
                   "oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", 
                   "oC_Variable", "oC_Literal", "oC_BooleanLiteral", "oC_NumberLiteral", 
                   "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_ListLiteral", 
                   "oC_MapLiteral", "oC_PropertyKeyName", "oC_Parameter", 
                   "oC_SchemaName", "oC_ReservedWord", "oC_SymbolicName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    UNION=47
    ALL=48
    OPTIONAL=49
    MATCH=50
    FOREACH=51
    UNWIND=52
    AS=53
    MERGE=54
    ON=55
    CREATE=56
    SET=57
    DETACH=58
    DELETE=59
    REMOVE=60
    CALL=61
    YIELD=62
    WITH=63
    RETURN=64
    DISTINCT=65
    ORDER=66
    BY=67
    L_SKIP=68
    LIMIT=69
    ASCENDING=70
    ASC=71
    DESCENDING=72
    DESC=73
    WHERE=74
    OR=75
    XOR=76
    AND=77
    NOT=78
    STARTS=79
    ENDS=80
    CONTAINS=81
    IN=82
    IS=83
    NULL=84
    COUNT=85
    CASE=86
    ELSE=87
    END=88
    WHEN=89
    THEN=90
    ANY=91
    NONE=92
    SINGLE=93
    EXISTS=94
    TRUE=95
    FALSE=96
    HexInteger=97
    DecimalInteger=98
    OctalInteger=99
    HexLetter=100
    HexDigit=101
    Digit=102
    NonZeroDigit=103
    NonZeroOctDigit=104
    OctDigit=105
    ZeroDigit=106
    ExponentDecimalReal=107
    RegularDecimalReal=108
    StringLiteral=109
    EscapedChar=110
    CONSTRAINT=111
    DO=112
    FOR=113
    REQUIRE=114
    UNIQUE=115
    MANDATORY=116
    SCALAR=117
    OF=118
    ADD=119
    DROP=120
    FILTER=121
    EXTRACT=122
    UnescapedSymbolicName=123
    IdentifierStart=124
    IdentifierPart=125
    EscapedSymbolicName=126
    SP=127
    WHITESPACE=128
    Comment=129

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(CypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(CypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)




    def oC_Cypher(self):

        localctx = CypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 212
                self.match(CypherParser.SP)


            self.state = 215
            self.oC_Statement()
            self.state = 220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 216
                    self.match(CypherParser.SP)


                self.state = 219
                self.match(CypherParser.T__0)


            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 222
                self.match(CypherParser.SP)


            self.state = 225
            self.match(CypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(CypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)




    def oC_Statement(self):

        localctx = CypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(CypherParser.OC_StandaloneCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)




    def oC_Query(self):

        localctx = CypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_Query)
        try:
            self.state = 231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 230
                self.oC_StandaloneCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)




    def oC_RegularQuery(self):

        localctx = CypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.oC_SingleQuery()
            self.state = 240
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 234
                        self.match(CypherParser.SP)


                    self.state = 237
                    self.oC_Union() 
                self.state = 242
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)




    def oC_Union(self):

        localctx = CypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self.match(CypherParser.UNION)
                self.state = 244
                self.match(CypherParser.SP)
                self.state = 245
                self.match(CypherParser.ALL)
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 246
                    self.match(CypherParser.SP)


                self.state = 249
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 250
                self.match(CypherParser.UNION)
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 251
                    self.match(CypherParser.SP)


                self.state = 254
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)




    def oC_SingleQuery(self):

        localctx = CypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_oC_SingleQuery)
        try:
            self.state = 259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 257
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 258
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)




    def oC_SinglePartQuery(self):

        localctx = CypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 296
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2312035458701328384) != 0):
                    self.state = 261
                    self.oC_ReadingClause()
                    self.state = 263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 262
                        self.match(CypherParser.SP)


                    self.state = 269
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 270
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 277
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 271
                        self.oC_ReadingClause()
                        self.state = 273
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 272
                            self.match(CypherParser.SP)

                 
                    self.state = 279
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 280
                self.oC_UpdatingClause()
                self.state = 287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 282
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 281
                            self.match(CypherParser.SP)


                        self.state = 284
                        self.oC_UpdatingClause() 
                    self.state = 289
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                self.state = 294
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 290
                        self.match(CypherParser.SP)


                    self.state = 293
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)




    def oC_MultiPartQuery(self):

        localctx = CypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 304
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 298
                            self.oC_ReadingClause()
                            self.state = 300
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==127:
                                self.state = 299
                                self.match(CypherParser.SP)

                     
                        self.state = 306
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                    self.state = 313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4559894622712627200) != 0):
                        self.state = 307
                        self.oC_UpdatingClause()
                        self.state = 309
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 308
                            self.match(CypherParser.SP)


                        self.state = 315
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 316
                    self.oC_With()
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 317
                        self.match(CypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 322 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 324
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(CypherParser.OC_MergeContext,0)


        def oC_Foreach(self):
            return self.getTypedRuleContext(CypherParser.OC_ForeachContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(CypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def oC_CallSubquery(self):
            return self.getTypedRuleContext(CypherParser.OC_CallSubqueryContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(CypherParser.OC_RemoveContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)




    def oC_UpdatingClause(self):

        localctx = CypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_UpdatingClause)
        try:
            self.state = 333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 326
                self.oC_Create()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 327
                self.oC_Merge()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 328
                self.oC_Foreach()
                pass
            elif token in [58, 59]:
                self.enterOuterAlt(localctx, 4)
                self.state = 329
                self.oC_Delete()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 5)
                self.state = 330
                self.oC_Set()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 6)
                self.state = 331
                self.oC_CallSubquery()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 7)
                self.state = 332
                self.oC_Remove()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(CypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(CypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(CypherParser.OC_InQueryCallContext,0)


        def oC_CallSubquery(self):
            return self.getTypedRuleContext(CypherParser.OC_CallSubqueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)




    def oC_ReadingClause(self):

        localctx = CypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_oC_ReadingClause)
        try:
            self.state = 339
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 335
                self.oC_Match()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 336
                self.oC_Unwind()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 337
                self.oC_InQueryCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 338
                self.oC_CallSubquery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)




    def oC_Match(self):

        localctx = CypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 341
                self.match(CypherParser.OPTIONAL)
                self.state = 342
                self.match(CypherParser.SP)


            self.state = 345
            self.match(CypherParser.MATCH)
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 346
                self.match(CypherParser.SP)


            self.state = 349
            self.oC_Pattern()
            self.state = 354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 350
                    self.match(CypherParser.SP)


                self.state = 353
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CallSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_CallSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CallSubquery" ):
                listener.enterOC_CallSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CallSubquery" ):
                listener.exitOC_CallSubquery(self)




    def oC_CallSubquery(self):

        localctx = CypherParser.OC_CallSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_CallSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(CypherParser.CALL)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 357
                self.match(CypherParser.SP)


            self.state = 360
            self.match(CypherParser.T__1)
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 361
                self.match(CypherParser.SP)


            self.state = 364
            self.oC_RegularQuery()
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 365
                self.match(CypherParser.SP)


            self.state = 368
            self.match(CypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ForeachContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOREACH(self):
            return self.getToken(CypherParser.FOREACH, 0)

        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Foreach

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Foreach" ):
                listener.enterOC_Foreach(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Foreach" ):
                listener.exitOC_Foreach(self)




    def oC_Foreach(self):

        localctx = CypherParser.OC_ForeachContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_oC_Foreach)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(CypherParser.FOREACH)
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 371
                self.match(CypherParser.SP)


            self.state = 374
            self.match(CypherParser.T__3)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 375
                self.match(CypherParser.SP)


            self.state = 378
            self.oC_IdInColl()
            self.state = 380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 379
                self.match(CypherParser.SP)


            self.state = 382
            self.match(CypherParser.T__4)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 383
                self.match(CypherParser.SP)


            self.state = 390 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 386
                self.oC_UpdatingClause()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 387
                    self.match(CypherParser.SP)


                self.state = 392 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 4559894622712627200) != 0)):
                    break

            self.state = 394
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)




    def oC_Unwind(self):

        localctx = CypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(CypherParser.UNWIND)
            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 397
                self.match(CypherParser.SP)


            self.state = 400
            self.oC_Expression()
            self.state = 401
            self.match(CypherParser.SP)
            self.state = 402
            self.match(CypherParser.AS)
            self.state = 403
            self.match(CypherParser.SP)
            self.state = 404
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)




    def oC_Merge(self):

        localctx = CypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(CypherParser.MERGE)
            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 407
                self.match(CypherParser.SP)


            self.state = 410
            self.oC_PatternPart()
            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 411
                    self.match(CypherParser.SP)
                    self.state = 412
                    self.oC_MergeAction() 
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)




    def oC_MergeAction(self):

        localctx = CypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_MergeAction)
        try:
            self.state = 428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 418
                self.match(CypherParser.ON)
                self.state = 419
                self.match(CypherParser.SP)
                self.state = 420
                self.match(CypherParser.MATCH)
                self.state = 421
                self.match(CypherParser.SP)
                self.state = 422
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 423
                self.match(CypherParser.ON)
                self.state = 424
                self.match(CypherParser.SP)
                self.state = 425
                self.match(CypherParser.CREATE)
                self.state = 426
                self.match(CypherParser.SP)
                self.state = 427
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)




    def oC_Create(self):

        localctx = CypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(CypherParser.CREATE)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 431
                self.match(CypherParser.SP)


            self.state = 434
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SetItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)




    def oC_Set(self):

        localctx = CypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(CypherParser.SET)
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 437
                self.match(CypherParser.SP)


            self.state = 440
            self.oC_SetItem()
            self.state = 451
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 441
                        self.match(CypherParser.SP)


                    self.state = 444
                    self.match(CypherParser.T__6)
                    self.state = 446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 445
                        self.match(CypherParser.SP)


                    self.state = 448
                    self.oC_SetItem() 
                self.state = 453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)




    def oC_SetItem(self):

        localctx = CypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.oC_PropertyExpression()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 455
                    self.match(CypherParser.SP)


                self.state = 458
                self.match(CypherParser.T__7)
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 459
                    self.match(CypherParser.SP)


                self.state = 462
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                self.oC_Variable()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 465
                    self.match(CypherParser.SP)


                self.state = 468
                self.match(CypherParser.T__7)
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 469
                    self.match(CypherParser.SP)


                self.state = 472
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 474
                self.oC_Variable()
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 475
                    self.match(CypherParser.SP)


                self.state = 478
                self.match(CypherParser.T__8)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 479
                    self.match(CypherParser.SP)


                self.state = 482
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 484
                self.oC_Variable()
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 485
                    self.match(CypherParser.SP)


                self.state = 488
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)




    def oC_Delete(self):

        localctx = CypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 492
                self.match(CypherParser.DETACH)
                self.state = 493
                self.match(CypherParser.SP)


            self.state = 496
            self.match(CypherParser.DELETE)
            self.state = 498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 497
                self.match(CypherParser.SP)


            self.state = 500
            self.oC_Expression()
            self.state = 511
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 501
                        self.match(CypherParser.SP)


                    self.state = 504
                    self.match(CypherParser.T__6)
                    self.state = 506
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 505
                        self.match(CypherParser.SP)


                    self.state = 508
                    self.oC_Expression() 
                self.state = 513
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)




    def oC_Remove(self):

        localctx = CypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(CypherParser.REMOVE)
            self.state = 515
            self.match(CypherParser.SP)
            self.state = 516
            self.oC_RemoveItem()
            self.state = 527
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 517
                        self.match(CypherParser.SP)


                    self.state = 520
                    self.match(CypherParser.T__6)
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 521
                        self.match(CypherParser.SP)


                    self.state = 524
                    self.oC_RemoveItem() 
                self.state = 529
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)




    def oC_RemoveItem(self):

        localctx = CypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_RemoveItem)
        try:
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.oC_Variable()
                self.state = 531
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 533
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)




    def oC_InQueryCall(self):

        localctx = CypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(CypherParser.CALL)
            self.state = 537
            self.match(CypherParser.SP)
            self.state = 538
            self.oC_ExplicitProcedureInvocation()
            self.state = 545
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 539
                    self.match(CypherParser.SP)


                self.state = 542
                self.match(CypherParser.YIELD)
                self.state = 543
                self.match(CypherParser.SP)
                self.state = 544
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)




    def oC_StandaloneCall(self):

        localctx = CypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_StandaloneCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(CypherParser.CALL)
            self.state = 548
            self.match(CypherParser.SP)
            self.state = 551
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.state = 549
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 550
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 553
                    self.match(CypherParser.SP)


                self.state = 556
                self.match(CypherParser.YIELD)
                self.state = 557
                self.match(CypherParser.SP)
                self.state = 560
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [10]:
                    self.state = 558
                    self.match(CypherParser.T__9)
                    pass
                elif token in [85, 91, 92, 93, 100, 121, 122, 123, 126]:
                    self.state = 559
                    self.oC_YieldItems()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_YieldItemContext,i)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)




    def oC_YieldItems(self):

        localctx = CypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.oC_YieldItem()
            self.state = 575
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 565
                        self.match(CypherParser.SP)


                    self.state = 568
                    self.match(CypherParser.T__6)
                    self.state = 570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 569
                        self.match(CypherParser.SP)


                    self.state = 572
                    self.oC_YieldItem() 
                self.state = 577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 578
                    self.match(CypherParser.SP)


                self.state = 581
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)




    def oC_YieldItem(self):

        localctx = CypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 584
                self.oC_ProcedureResultField()
                self.state = 585
                self.match(CypherParser.SP)
                self.state = 586
                self.match(CypherParser.AS)
                self.state = 587
                self.match(CypherParser.SP)


            self.state = 591
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)




    def oC_With(self):

        localctx = CypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(CypherParser.WITH)
            self.state = 594
            self.oC_ProjectionBody()
            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 595
                    self.match(CypherParser.SP)


                self.state = 598
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)




    def oC_Return(self):

        localctx = CypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(CypherParser.RETURN)
            self.state = 602
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(CypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(CypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(CypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)




    def oC_ProjectionBody(self):

        localctx = CypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 604
                    self.match(CypherParser.SP)


                self.state = 607
                self.match(CypherParser.DISTINCT)


            self.state = 610
            self.match(CypherParser.SP)
            self.state = 611
            self.oC_ProjectionItems()
            self.state = 614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                self.state = 612
                self.match(CypherParser.SP)
                self.state = 613
                self.oC_Order()


            self.state = 618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 616
                self.match(CypherParser.SP)
                self.state = 617
                self.oC_Skip()


            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 620
                self.match(CypherParser.SP)
                self.state = 621
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)




    def oC_ProjectionItems(self):

        localctx = CypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.match(CypherParser.T__9)
                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 626
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 625
                            self.match(CypherParser.SP)


                        self.state = 628
                        self.match(CypherParser.T__6)
                        self.state = 630
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 629
                            self.match(CypherParser.SP)


                        self.state = 632
                        self.oC_ProjectionItem() 
                    self.state = 637
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

                pass
            elif token in [2, 4, 11, 21, 22, 27, 48, 78, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107, 108, 109, 121, 122, 123, 126]:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.oC_ProjectionItem()
                self.state = 649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 640
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 639
                            self.match(CypherParser.SP)


                        self.state = 642
                        self.match(CypherParser.T__6)
                        self.state = 644
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 643
                            self.match(CypherParser.SP)


                        self.state = 646
                        self.oC_ProjectionItem() 
                    self.state = 651
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)




    def oC_ProjectionItem(self):

        localctx = CypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_ProjectionItem)
        try:
            self.state = 661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 654
                self.oC_Expression()
                self.state = 655
                self.match(CypherParser.SP)
                self.state = 656
                self.match(CypherParser.AS)
                self.state = 657
                self.match(CypherParser.SP)
                self.state = 658
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)




    def oC_Order(self):

        localctx = CypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(CypherParser.ORDER)
            self.state = 664
            self.match(CypherParser.SP)
            self.state = 665
            self.match(CypherParser.BY)
            self.state = 666
            self.match(CypherParser.SP)
            self.state = 667
            self.oC_SortItem()
            self.state = 678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 668
                        self.match(CypherParser.SP)


                    self.state = 671
                    self.match(CypherParser.T__6)
                    self.state = 673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 672
                        self.match(CypherParser.SP)


                    self.state = 675
                    self.oC_SortItem() 
                self.state = 680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)




    def oC_Skip(self):

        localctx = CypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(CypherParser.L_SKIP)
            self.state = 682
            self.match(CypherParser.SP)
            self.state = 683
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)




    def oC_Limit(self):

        localctx = CypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(CypherParser.LIMIT)
            self.state = 686
            self.match(CypherParser.SP)
            self.state = 687
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)




    def oC_SortItem(self):

        localctx = CypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.oC_Expression()
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 690
                    self.match(CypherParser.SP)


                self.state = 693
                _la = self._input.LA(1)
                if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)




    def oC_Where(self):

        localctx = CypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 696
            self.match(CypherParser.WHERE)
            self.state = 697
            self.match(CypherParser.SP)
            self.state = 698
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)




    def oC_Pattern(self):

        localctx = CypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.oC_PatternPart()
            self.state = 711
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 701
                        self.match(CypherParser.SP)


                    self.state = 704
                    self.match(CypherParser.T__6)
                    self.state = 706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 705
                        self.match(CypherParser.SP)


                    self.state = 708
                    self.oC_PatternPart() 
                self.state = 713
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_AnonymousPatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)




    def oC_PatternPart(self):

        localctx = CypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85, 91, 92, 93, 100, 121, 122, 123, 126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 714
                self.oC_Variable()
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 715
                    self.match(CypherParser.SP)


                self.state = 718
                self.match(CypherParser.T__7)
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 719
                    self.match(CypherParser.SP)


                self.state = 722
                self.oC_AnonymousPatternPart()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 724
                self.oC_AnonymousPatternPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)




    def oC_AnonymousPatternPart(self):

        localctx = CypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)




    def oC_PatternElement(self):

        localctx = CypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 729
                self.oC_NodePattern()
                self.state = 736
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 731
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 730
                            self.match(CypherParser.SP)


                        self.state = 733
                        self.oC_PatternElementChain() 
                    self.state = 738
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.match(CypherParser.T__3)
                self.state = 740
                self.oC_PatternElement()
                self.state = 741
                self.match(CypherParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)




    def oC_RelationshipsPattern(self):

        localctx = CypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.oC_NodePattern()
            self.state = 750 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 747
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 746
                        self.match(CypherParser.SP)


                    self.state = 749
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 752 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)




    def oC_NodePattern(self):

        localctx = CypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(CypherParser.T__3)
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 755
                self.match(CypherParser.SP)


            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 2680059625921) != 0):
                self.state = 758
                self.oC_Variable()
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 759
                    self.match(CypherParser.SP)




            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 764
                self.oC_NodeLabels()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 765
                    self.match(CypherParser.SP)




            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==27:
                self.state = 770
                self.oC_Properties()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 771
                    self.match(CypherParser.SP)




            self.state = 776
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)




    def oC_PatternElementChain(self):

        localctx = CypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.oC_RelationshipPattern()
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 779
                self.match(CypherParser.SP)


            self.state = 782
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)




    def oC_RelationshipPattern(self):

        localctx = CypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 784
                self.oC_LeftArrowHead()
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 785
                    self.match(CypherParser.SP)


                self.state = 788
                self.oC_Dash()
                self.state = 790
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 789
                    self.match(CypherParser.SP)


                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 792
                    self.oC_RelationshipDetail()


                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 795
                    self.match(CypherParser.SP)


                self.state = 798
                self.oC_Dash()
                self.state = 800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 799
                    self.match(CypherParser.SP)


                self.state = 802
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.oC_LeftArrowHead()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 805
                    self.match(CypherParser.SP)


                self.state = 808
                self.oC_Dash()
                self.state = 810
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
                if la_ == 1:
                    self.state = 809
                    self.match(CypherParser.SP)


                self.state = 813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 812
                    self.oC_RelationshipDetail()


                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 815
                    self.match(CypherParser.SP)


                self.state = 818
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 820
                self.oC_Dash()
                self.state = 822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 821
                    self.match(CypherParser.SP)


                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 824
                    self.oC_RelationshipDetail()


                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 827
                    self.match(CypherParser.SP)


                self.state = 830
                self.oC_Dash()
                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 831
                    self.match(CypherParser.SP)


                self.state = 834
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 836
                self.oC_Dash()
                self.state = 838
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 837
                    self.match(CypherParser.SP)


                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==11:
                    self.state = 840
                    self.oC_RelationshipDetail()


                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 843
                    self.match(CypherParser.SP)


                self.state = 846
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_RangeLiteralContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)




    def oC_RelationshipDetail(self):

        localctx = CypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(CypherParser.T__10)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 851
                self.match(CypherParser.SP)


            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 2680059625921) != 0):
                self.state = 854
                self.oC_Variable()
                self.state = 856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 855
                    self.match(CypherParser.SP)




            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 860
                self.oC_RelationshipTypes()
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 861
                    self.match(CypherParser.SP)




            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 866
                self.oC_RangeLiteral()


            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2 or _la==27:
                self.state = 869
                self.oC_Properties()
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 870
                    self.match(CypherParser.SP)




            self.state = 875
            self.match(CypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)




    def oC_Properties(self):

        localctx = CypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_Properties)
        try:
            self.state = 879
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 877
                self.oC_MapLiteral()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 2)
                self.state = 878
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)




    def oC_RelationshipTypes(self):

        localctx = CypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(CypherParser.T__12)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 882
                self.match(CypherParser.SP)


            self.state = 885
            self.oC_RelTypeName()
            self.state = 899
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 886
                        self.match(CypherParser.SP)


                    self.state = 889
                    self.match(CypherParser.T__4)
                    self.state = 891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==13:
                        self.state = 890
                        self.match(CypherParser.T__12)


                    self.state = 894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 893
                        self.match(CypherParser.SP)


                    self.state = 896
                    self.oC_RelTypeName() 
                self.state = 901
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)




    def oC_NodeLabels(self):

        localctx = CypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 902
            self.oC_NodeLabel()
            self.state = 909
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 904
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 903
                        self.match(CypherParser.SP)


                    self.state = 906
                    self.oC_NodeLabel() 
                self.state = 911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(CypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)




    def oC_NodeLabel(self):

        localctx = CypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self.match(CypherParser.T__12)
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 913
                self.match(CypherParser.SP)


            self.state = 916
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)




    def oC_RangeLiteral(self):

        localctx = CypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(CypherParser.T__9)
            self.state = 920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 919
                self.match(CypherParser.SP)


            self.state = 926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 7) != 0):
                self.state = 922
                self.oC_IntegerLiteral()
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 923
                    self.match(CypherParser.SP)




            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 928
                self.match(CypherParser.T__13)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 929
                    self.match(CypherParser.SP)


                self.state = 936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 7) != 0):
                    self.state = 932
                    self.oC_IntegerLiteral()
                    self.state = 934
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 933
                        self.match(CypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)




    def oC_LabelName(self):

        localctx = CypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)




    def oC_RelTypeName(self):

        localctx = CypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)




    def oC_PropertyExpression(self):

        localctx = CypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 944
            self.oC_Atom()
            self.state = 949 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 946
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 945
                        self.match(CypherParser.SP)


                    self.state = 948
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 951 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)




    def oC_Expression(self):

        localctx = CypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.OR)
            else:
                return self.getToken(CypherParser.OR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)




    def oC_OrExpression(self):

        localctx = CypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.oC_XorExpression()
            self.state = 962
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 956
                    self.match(CypherParser.SP)
                    self.state = 957
                    self.match(CypherParser.OR)
                    self.state = 958
                    self.match(CypherParser.SP)
                    self.state = 959
                    self.oC_XorExpression() 
                self.state = 964
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.XOR)
            else:
                return self.getToken(CypherParser.XOR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)




    def oC_XorExpression(self):

        localctx = CypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.oC_AndExpression()
            self.state = 972
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 966
                    self.match(CypherParser.SP)
                    self.state = 967
                    self.match(CypherParser.XOR)
                    self.state = 968
                    self.match(CypherParser.SP)
                    self.state = 969
                    self.oC_AndExpression() 
                self.state = 974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AND)
            else:
                return self.getToken(CypherParser.AND, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)




    def oC_AndExpression(self):

        localctx = CypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.oC_NotExpression()
            self.state = 982
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 976
                    self.match(CypherParser.SP)
                    self.state = 977
                    self.match(CypherParser.AND)
                    self.state = 978
                    self.match(CypherParser.SP)
                    self.state = 979
                    self.oC_NotExpression() 
                self.state = 984
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NOT)
            else:
                return self.getToken(CypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)




    def oC_NotExpression(self):

        localctx = CypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==78:
                self.state = 985
                self.match(CypherParser.NOT)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 986
                    self.match(CypherParser.SP)


                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 994
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullPredicateExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)




    def oC_ComparisonExpression(self):

        localctx = CypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.oC_StringListNullPredicateExpression()
            self.state = 1003
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 998
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 997
                        self.match(CypherParser.SP)


                    self.state = 1000
                    self.oC_PartialComparisonExpression() 
                self.state = 1005
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullPredicateExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullPredicateExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)




    def oC_PartialComparisonExpression(self):

        localctx = CypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.match(CypherParser.T__7)
                self.state = 1008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1007
                    self.match(CypherParser.SP)


                self.state = 1010
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1011
                self.match(CypherParser.T__14)
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1012
                    self.match(CypherParser.SP)


                self.state = 1015
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1016
                self.match(CypherParser.T__15)
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1017
                    self.match(CypherParser.SP)


                self.state = 1020
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1021
                self.match(CypherParser.T__16)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1022
                    self.match(CypherParser.SP)


                self.state = 1025
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1026
                self.match(CypherParser.T__17)
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1027
                    self.match(CypherParser.SP)


                self.state = 1030
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1031
                self.match(CypherParser.T__18)
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1032
                    self.match(CypherParser.SP)


                self.state = 1035
                self.oC_StringListNullPredicateExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1036
                self.match(CypherParser.T__19)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1037
                    self.match(CypherParser.SP)


                self.state = 1040
                self.oC_StringListNullPredicateExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def oC_StringPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_StringPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_StringPredicateExpressionContext,i)


        def oC_ListPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListPredicateExpressionContext,i)


        def oC_NullPredicateExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NullPredicateExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NullPredicateExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringListNullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullPredicateExpression" ):
                listener.enterOC_StringListNullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullPredicateExpression" ):
                listener.exitOC_StringListNullPredicateExpression(self)




    def oC_StringListNullPredicateExpression(self):

        localctx = CypherParser.OC_StringListNullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_StringListNullPredicateExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.oC_AddOrSubtractExpression()
            self.state = 1049
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1047
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                    if la_ == 1:
                        self.state = 1044
                        self.oC_StringPredicateExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1045
                        self.oC_ListPredicateExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1046
                        self.oC_NullPredicateExpression()
                        pass

             
                self.state = 1051
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringPredicateExpression" ):
                listener.enterOC_StringPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringPredicateExpression" ):
                listener.exitOC_StringPredicateExpression(self)




    def oC_StringPredicateExpression(self):

        localctx = CypherParser.OC_StringPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_StringPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1052
                self.match(CypherParser.SP)
                self.state = 1053
                self.match(CypherParser.STARTS)
                self.state = 1054
                self.match(CypherParser.SP)
                self.state = 1055
                self.match(CypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1056
                self.match(CypherParser.SP)
                self.state = 1057
                self.match(CypherParser.ENDS)
                self.state = 1058
                self.match(CypherParser.SP)
                self.state = 1059
                self.match(CypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1060
                self.match(CypherParser.SP)
                self.state = 1061
                self.match(CypherParser.CONTAINS)
                pass


            self.state = 1065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1064
                self.match(CypherParser.SP)


            self.state = 1067
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListPredicateExpression" ):
                listener.enterOC_ListPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListPredicateExpression" ):
                listener.exitOC_ListPredicateExpression(self)




    def oC_ListPredicateExpression(self):

        localctx = CypherParser.OC_ListPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_ListPredicateExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(CypherParser.SP)
            self.state = 1070
            self.match(CypherParser.IN)
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1071
                self.match(CypherParser.SP)


            self.state = 1074
            self.oC_AddOrSubtractExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullPredicateExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NullPredicateExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullPredicateExpression" ):
                listener.enterOC_NullPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullPredicateExpression" ):
                listener.exitOC_NullPredicateExpression(self)




    def oC_NullPredicateExpression(self):

        localctx = CypherParser.OC_NullPredicateExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_NullPredicateExpression)
        try:
            self.state = 1086
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.match(CypherParser.SP)
                self.state = 1077
                self.match(CypherParser.IS)
                self.state = 1078
                self.match(CypherParser.SP)
                self.state = 1079
                self.match(CypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1080
                self.match(CypherParser.SP)
                self.state = 1081
                self.match(CypherParser.IS)
                self.state = 1082
                self.match(CypherParser.SP)
                self.state = 1083
                self.match(CypherParser.NOT)
                self.state = 1084
                self.match(CypherParser.SP)
                self.state = 1085
                self.match(CypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)




    def oC_AddOrSubtractExpression(self):

        localctx = CypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.oC_MultiplyDivideModuloExpression()
            self.state = 1107
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,187,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1105
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                    if la_ == 1:
                        self.state = 1090
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1089
                            self.match(CypherParser.SP)


                        self.state = 1092
                        self.match(CypherParser.T__20)
                        self.state = 1094
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1093
                            self.match(CypherParser.SP)


                        self.state = 1096
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1098
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1097
                            self.match(CypherParser.SP)


                        self.state = 1100
                        self.match(CypherParser.T__21)
                        self.state = 1102
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1101
                            self.match(CypherParser.SP)


                        self.state = 1104
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 1109
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,187,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = CypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.oC_PowerOfExpression()
            self.state = 1137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1135
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                    if la_ == 1:
                        self.state = 1112
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1111
                            self.match(CypherParser.SP)


                        self.state = 1114
                        self.match(CypherParser.T__9)
                        self.state = 1116
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1115
                            self.match(CypherParser.SP)


                        self.state = 1118
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 1120
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1119
                            self.match(CypherParser.SP)


                        self.state = 1122
                        self.match(CypherParser.T__22)
                        self.state = 1124
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1123
                            self.match(CypherParser.SP)


                        self.state = 1126
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1128
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1127
                            self.match(CypherParser.SP)


                        self.state = 1130
                        self.match(CypherParser.T__23)
                        self.state = 1132
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1131
                            self.match(CypherParser.SP)


                        self.state = 1134
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 1139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)




    def oC_PowerOfExpression(self):

        localctx = CypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 1151
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1142
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1141
                        self.match(CypherParser.SP)


                    self.state = 1144
                    self.match(CypherParser.T__24)
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1145
                        self.match(CypherParser.SP)


                    self.state = 1148
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 1153
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ListOperatorExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ListOperatorExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = CypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.state = 1160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 4, 11, 27, 48, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 107, 108, 109, 121, 122, 123, 126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1154
                self.oC_ListOperatorExpression()
                pass
            elif token in [21, 22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1155
                _la = self._input.LA(1)
                if not(_la==21 or _la==22):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1156
                    self.match(CypherParser.SP)


                self.state = 1159
                self.oC_ListOperatorExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)




    def oC_ListOperatorExpression(self):

        localctx = CypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.oC_PropertyOrLabelsExpression()
            self.state = 1184
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1182
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        self.state = 1164
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1163
                            self.match(CypherParser.SP)


                        self.state = 1166
                        self.match(CypherParser.T__10)
                        self.state = 1167
                        self.oC_Expression()
                        self.state = 1168
                        self.match(CypherParser.T__11)
                        pass

                    elif la_ == 2:
                        self.state = 1171
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1170
                            self.match(CypherParser.SP)


                        self.state = 1173
                        self.match(CypherParser.T__10)
                        self.state = 1175
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 281475117221908) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 343051394343361) != 0):
                            self.state = 1174
                            self.oC_Expression()


                        self.state = 1177
                        self.match(CypherParser.T__13)
                        self.state = 1179
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 281475117221908) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 343051394343361) != 0):
                            self.state = 1178
                            self.oC_Expression()


                        self.state = 1181
                        self.match(CypherParser.T__11)
                        pass

             
                self.state = 1186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = CypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.oC_Atom()
            self.state = 1194
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1188
                        self.match(CypherParser.SP)


                    self.state = 1191
                    self.oC_PropertyLookup() 
                self.state = 1196
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

            self.state = 1201
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1197
                    self.match(CypherParser.SP)


                self.state = 1200
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)




    def oC_PropertyLookup(self):

        localctx = CypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(CypherParser.T__25)
            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1204
                self.match(CypherParser.SP)


            self.state = 1207
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(CypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternComprehensionContext,0)


        def oC_Quantifier(self):
            return self.getTypedRuleContext(CypherParser.OC_QuantifierContext,0)


        def oC_PatternPredicate(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPredicateContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionInvocationContext,0)


        def oC_ExistentialSubquery(self):
            return self.getTypedRuleContext(CypherParser.OC_ExistentialSubqueryContext,0)


        def oC_CountSubquery(self):
            return self.getTypedRuleContext(CypherParser.OC_CountSubqueryContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)




    def oC_Atom(self):

        localctx = CypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1234
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1209
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1211
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1212
                self.match(CypherParser.COUNT)
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1213
                    self.match(CypherParser.SP)


                self.state = 1216
                self.match(CypherParser.T__3)
                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1217
                    self.match(CypherParser.SP)


                self.state = 1220
                self.match(CypherParser.T__9)
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1221
                    self.match(CypherParser.SP)


                self.state = 1224
                self.match(CypherParser.T__5)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1225
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1226
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1227
                self.oC_Quantifier()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1228
                self.oC_PatternPredicate()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1229
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1230
                self.oC_FunctionInvocation()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1231
                self.oC_ExistentialSubquery()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1232
                self.oC_CountSubquery()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1233
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def oC_CaseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_CaseAlternativeContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)




    def oC_CaseExpression(self):

        localctx = CypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,221,self._ctx)
            if la_ == 1:
                self.state = 1236
                self.match(CypherParser.CASE)
                self.state = 1241 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1238
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1237
                            self.match(CypherParser.SP)


                        self.state = 1240
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1243 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,217,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1245
                self.match(CypherParser.CASE)
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1246
                    self.match(CypherParser.SP)


                self.state = 1249
                self.oC_Expression()
                self.state = 1254 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1251
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==127:
                            self.state = 1250
                            self.match(CypherParser.SP)


                        self.state = 1253
                        self.oC_CaseAlternative()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1256 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

                pass


            self.state = 1268
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1260
                    self.match(CypherParser.SP)


                self.state = 1263
                self.match(CypherParser.ELSE)
                self.state = 1265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1264
                    self.match(CypherParser.SP)


                self.state = 1267
                self.oC_Expression()


            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1270
                self.match(CypherParser.SP)


            self.state = 1273
            self.match(CypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternative" ):
                listener.enterOC_CaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternative" ):
                listener.exitOC_CaseAlternative(self)




    def oC_CaseAlternative(self):

        localctx = CypherParser.OC_CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_CaseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(CypherParser.WHEN)
            self.state = 1277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1276
                self.match(CypherParser.SP)


            self.state = 1279
            self.oC_Expression()
            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1280
                self.match(CypherParser.SP)


            self.state = 1283
            self.match(CypherParser.THEN)
            self.state = 1285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1284
                self.match(CypherParser.SP)


            self.state = 1287
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)




    def oC_ListComprehension(self):

        localctx = CypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            self.match(CypherParser.T__10)
            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1290
                self.match(CypherParser.SP)


            self.state = 1293
            self.oC_FilterExpression()
            self.state = 1302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1294
                    self.match(CypherParser.SP)


                self.state = 1297
                self.match(CypherParser.T__4)
                self.state = 1299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1298
                    self.match(CypherParser.SP)


                self.state = 1301
                self.oC_Expression()


            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1304
                self.match(CypherParser.SP)


            self.state = 1307
            self.match(CypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)




    def oC_PatternComprehension(self):

        localctx = CypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.match(CypherParser.T__10)
            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1310
                self.match(CypherParser.SP)


            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 2680059625921) != 0):
                self.state = 1313
                self.oC_Variable()
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1314
                    self.match(CypherParser.SP)


                self.state = 1317
                self.match(CypherParser.T__7)
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1318
                    self.match(CypherParser.SP)




            self.state = 1323
            self.oC_RelationshipsPattern()
            self.state = 1325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1324
                self.match(CypherParser.SP)


            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==74:
                self.state = 1327
                self.oC_Where()
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1328
                    self.match(CypherParser.SP)




            self.state = 1333
            self.match(CypherParser.T__4)
            self.state = 1335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1334
                self.match(CypherParser.SP)


            self.state = 1337
            self.oC_Expression()
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1338
                self.match(CypherParser.SP)


            self.state = 1341
            self.match(CypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Quantifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Quantifier" ):
                listener.enterOC_Quantifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Quantifier" ):
                listener.exitOC_Quantifier(self)




    def oC_Quantifier(self):

        localctx = CypherParser.OC_QuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_Quantifier)
        self._la = 0 # Token type
        try:
            self.state = 1399
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1343
                self.match(CypherParser.ALL)
                self.state = 1345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1344
                    self.match(CypherParser.SP)


                self.state = 1347
                self.match(CypherParser.T__3)
                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1348
                    self.match(CypherParser.SP)


                self.state = 1351
                self.oC_FilterExpression()
                self.state = 1353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1352
                    self.match(CypherParser.SP)


                self.state = 1355
                self.match(CypherParser.T__5)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1357
                self.match(CypherParser.ANY)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1358
                    self.match(CypherParser.SP)


                self.state = 1361
                self.match(CypherParser.T__3)
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1362
                    self.match(CypherParser.SP)


                self.state = 1365
                self.oC_FilterExpression()
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1366
                    self.match(CypherParser.SP)


                self.state = 1369
                self.match(CypherParser.T__5)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1371
                self.match(CypherParser.NONE)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1372
                    self.match(CypherParser.SP)


                self.state = 1375
                self.match(CypherParser.T__3)
                self.state = 1377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1376
                    self.match(CypherParser.SP)


                self.state = 1379
                self.oC_FilterExpression()
                self.state = 1381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1380
                    self.match(CypherParser.SP)


                self.state = 1383
                self.match(CypherParser.T__5)
                pass
            elif token in [93]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1385
                self.match(CypherParser.SINGLE)
                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1386
                    self.match(CypherParser.SP)


                self.state = 1389
                self.match(CypherParser.T__3)
                self.state = 1391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1390
                    self.match(CypherParser.SP)


                self.state = 1393
                self.oC_FilterExpression()
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1394
                    self.match(CypherParser.SP)


                self.state = 1397
                self.match(CypherParser.T__5)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)




    def oC_FilterExpression(self):

        localctx = CypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.oC_IdInColl()
            self.state = 1406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                self.state = 1403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1402
                    self.match(CypherParser.SP)


                self.state = 1405
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPredicate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPredicate" ):
                listener.enterOC_PatternPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPredicate" ):
                listener.exitOC_PatternPredicate(self)




    def oC_PatternPredicate(self):

        localctx = CypherParser.OC_PatternPredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_PatternPredicate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.oC_RelationshipsPattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)




    def oC_ParenthesizedExpression(self):

        localctx = CypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            self.match(CypherParser.T__3)
            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1411
                self.match(CypherParser.SP)


            self.state = 1414
            self.oC_Expression()
            self.state = 1416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1415
                self.match(CypherParser.SP)


            self.state = 1418
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)




    def oC_IdInColl(self):

        localctx = CypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1420
            self.oC_Variable()
            self.state = 1421
            self.match(CypherParser.SP)
            self.state = 1422
            self.match(CypherParser.IN)
            self.state = 1423
            self.match(CypherParser.SP)
            self.state = 1424
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)




    def oC_FunctionInvocation(self):

        localctx = CypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1426
            self.oC_FunctionName()
            self.state = 1428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1427
                self.match(CypherParser.SP)


            self.state = 1430
            self.match(CypherParser.T__3)
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1431
                self.match(CypherParser.SP)


            self.state = 1438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65:
                self.state = 1434
                self.match(CypherParser.DISTINCT)
                self.state = 1436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1435
                    self.match(CypherParser.SP)




            self.state = 1457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 281475117221908) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 343051394343361) != 0):
                self.state = 1440
                self.oC_Expression()
                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1441
                    self.match(CypherParser.SP)


                self.state = 1454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 1444
                    self.match(CypherParser.T__6)
                    self.state = 1446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1445
                        self.match(CypherParser.SP)


                    self.state = 1448
                    self.oC_Expression()
                    self.state = 1450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1449
                        self.match(CypherParser.SP)


                    self.state = 1456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1459
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)




    def oC_FunctionName(self):

        localctx = CypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_FunctionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1461
            self.oC_Namespace()
            self.state = 1462
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExistentialSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_WithContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExistentialSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExistentialSubquery" ):
                listener.enterOC_ExistentialSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExistentialSubquery" ):
                listener.exitOC_ExistentialSubquery(self)




    def oC_ExistentialSubquery(self):

        localctx = CypherParser.OC_ExistentialSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_ExistentialSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1464
            self.match(CypherParser.EXISTS)
            self.state = 1466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1465
                self.match(CypherParser.SP)


            self.state = 1468
            self.match(CypherParser.T__1)
            self.state = 1470
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1469
                self.match(CypherParser.SP)


            self.state = 1491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 1472
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.state = 1473
                self.oC_Pattern()
                self.state = 1478
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 1475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1474
                        self.match(CypherParser.SP)


                    self.state = 1477
                    self.oC_Where()


                pass

            elif la_ == 3:
                self.state = 1487 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1482
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [49, 50, 52, 61]:
                        self.state = 1480
                        self.oC_ReadingClause()
                        pass
                    elif token in [63]:
                        self.state = 1481
                        self.oC_With()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1485
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                    if la_ == 1:
                        self.state = 1484
                        self.match(CypherParser.SP)


                    self.state = 1489 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -6911336578153447424) != 0)):
                        break

                pass


            self.state = 1494
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1493
                self.match(CypherParser.SP)


            self.state = 1496
            self.match(CypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CountSubqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_WithContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CountSubquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CountSubquery" ):
                listener.enterOC_CountSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CountSubquery" ):
                listener.exitOC_CountSubquery(self)




    def oC_CountSubquery(self):

        localctx = CypherParser.OC_CountSubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_CountSubquery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1498
            self.match(CypherParser.COUNT)
            self.state = 1500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1499
                self.match(CypherParser.SP)


            self.state = 1502
            self.match(CypherParser.T__1)
            self.state = 1504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1503
                self.match(CypherParser.SP)


            self.state = 1525
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 1506
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.state = 1507
                self.oC_Pattern()
                self.state = 1512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
                if la_ == 1:
                    self.state = 1509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1508
                        self.match(CypherParser.SP)


                    self.state = 1511
                    self.oC_Where()


                pass

            elif la_ == 3:
                self.state = 1521 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1516
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [49, 50, 52, 61]:
                        self.state = 1514
                        self.oC_ReadingClause()
                        pass
                    elif token in [63]:
                        self.state = 1515
                        self.oC_With()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1519
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                    if la_ == 1:
                        self.state = 1518
                        self.match(CypherParser.SP)


                    self.state = 1523 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & -6911336578153447424) != 0)):
                        break

                pass


            self.state = 1528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1527
                self.match(CypherParser.SP)


            self.state = 1530
            self.match(CypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.oC_ProcedureName()
            self.state = 1534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1533
                self.match(CypherParser.SP)


            self.state = 1536
            self.match(CypherParser.T__3)
            self.state = 1538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1537
                self.match(CypherParser.SP)


            self.state = 1557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 281475117221908) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 343051394343361) != 0):
                self.state = 1540
                self.oC_Expression()
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1541
                    self.match(CypherParser.SP)


                self.state = 1554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 1544
                    self.match(CypherParser.T__6)
                    self.state = 1546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1545
                        self.match(CypherParser.SP)


                    self.state = 1548
                    self.oC_Expression()
                    self.state = 1550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1549
                        self.match(CypherParser.SP)


                    self.state = 1556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1559
            self.match(CypherParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)




    def oC_ProcedureResultField(self):

        localctx = CypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1563
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)




    def oC_ProcedureName(self):

        localctx = CypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1565
            self.oC_Namespace()
            self.state = 1566
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)




    def oC_Namespace(self):

        localctx = CypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1573
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1568
                    self.oC_SymbolicName()
                    self.state = 1569
                    self.match(CypherParser.T__25) 
                self.state = 1575
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)




    def oC_Variable(self):

        localctx = CypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1576
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_ListLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_ListLiteralContext,0)


        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)




    def oC_Literal(self):

        localctx = CypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_Literal)
        try:
            self.state = 1584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1578
                self.oC_BooleanLiteral()
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1579
                self.match(CypherParser.NULL)
                pass
            elif token in [97, 98, 99, 107, 108]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1580
                self.oC_NumberLiteral()
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1581
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1582
                self.oC_ListLiteral()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1583
                self.oC_MapLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)




    def oC_BooleanLiteral(self):

        localctx = CypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1586
            _la = self._input.LA(1)
            if not(_la==95 or _la==96):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)




    def oC_NumberLiteral(self):

        localctx = CypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1588
                self.oC_DoubleLiteral()
                pass
            elif token in [97, 98, 99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1589
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(CypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(CypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)




    def oC_IntegerLiteral(self):

        localctx = CypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1592
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(CypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(CypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)




    def oC_DoubleLiteral(self):

        localctx = CypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1594
            _la = self._input.LA(1)
            if not(_la==107 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)




    def oC_ListLiteral(self):

        localctx = CypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1596
            self.match(CypherParser.T__10)
            self.state = 1598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1597
                self.match(CypherParser.SP)


            self.state = 1617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 281475117221908) != 0) or ((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 343051394343361) != 0):
                self.state = 1600
                self.oC_Expression()
                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1601
                    self.match(CypherParser.SP)


                self.state = 1614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 1604
                    self.match(CypherParser.T__6)
                    self.state = 1606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1605
                        self.match(CypherParser.SP)


                    self.state = 1608
                    self.oC_Expression()
                    self.state = 1610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1609
                        self.match(CypherParser.SP)


                    self.state = 1616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1619
            self.match(CypherParser.T__11)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)




    def oC_MapLiteral(self):

        localctx = CypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(CypherParser.T__1)
            self.state = 1623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==127:
                self.state = 1622
                self.match(CypherParser.SP)


            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -6919921564943122432) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 5764466862855290879) != 0):
                self.state = 1625
                self.oC_PropertyKeyName()
                self.state = 1627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1626
                    self.match(CypherParser.SP)


                self.state = 1629
                self.match(CypherParser.T__12)
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1630
                    self.match(CypherParser.SP)


                self.state = 1633
                self.oC_Expression()
                self.state = 1635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==127:
                    self.state = 1634
                    self.match(CypherParser.SP)


                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 1637
                    self.match(CypherParser.T__6)
                    self.state = 1639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1638
                        self.match(CypherParser.SP)


                    self.state = 1641
                    self.oC_PropertyKeyName()
                    self.state = 1643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1642
                        self.match(CypherParser.SP)


                    self.state = 1645
                    self.match(CypherParser.T__12)
                    self.state = 1647
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1646
                        self.match(CypherParser.SP)


                    self.state = 1649
                    self.oC_Expression()
                    self.state = 1651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==127:
                        self.state = 1650
                        self.match(CypherParser.SP)


                    self.state = 1657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1660
            self.match(CypherParser.T__2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)




    def oC_PropertyKeyName(self):

        localctx = CypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)




    def oC_Parameter(self):

        localctx = CypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(CypherParser.T__26)
            self.state = 1667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85, 91, 92, 93, 100, 121, 122, 123, 126]:
                self.state = 1665
                self.oC_SymbolicName()
                pass
            elif token in [98]:
                self.state = 1666
                self.match(CypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(CypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)




    def oC_SchemaName(self):

        localctx = CypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_oC_SchemaName)
        try:
            self.state = 1671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85, 91, 92, 93, 100, 121, 122, 123, 126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1669
                self.oC_SymbolicName()
                pass
            elif token in [47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 94, 95, 96, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1670
                self.oC_ReservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(CypherParser.AND, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def OR(self):
            return self.getToken(CypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(CypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(CypherParser.DO, 0)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(CypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(CypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(CypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def ADD(self):
            return self.getToken(CypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)




    def oC_ReservedWord(self):

        localctx = CypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1673
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -6919921564943122432) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 143974458235813887) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(CypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(CypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(CypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(CypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(CypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)




    def oC_SymbolicName(self):

        localctx = CypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1675
            _la = self._input.LA(1)
            if not(((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 2680059625921) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)




    def oC_LeftArrowHead(self):

        localctx = CypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1677
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4026597376) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)




    def oC_RightArrowHead(self):

        localctx = CypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1679
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 64424640512) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)




    def oC_Dash(self):

        localctx = CypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1681
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 140668773072896) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





