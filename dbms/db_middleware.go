// Code generated by "middlewarer -type=DB"; DO NOT EDIT.
package dbms

import (
	"github.com/Anon10214/dinkel/models/opencypher/schema"
	"github.com/Anon10214/dinkel/seed"
)

// WrapDB returns the passed DB wrapped in the middleware defined in DBMiddleware
func WrapDB(toWrap DB, wrapper DBMiddleware) DB {
	wrapper.wrapped = toWrap
	return &wrapper
}

// DBMiddleware implements DB
type DBMiddleware struct {
	wrapped DB

	DiscardQueryMiddleware       func(DiscardQueryHandler) DiscardQueryHandler
	GetQueryResultTypeMiddleware func(GetQueryResultTypeHandler) GetQueryResultTypeHandler
	GetSchemaMiddleware          func(GetSchemaHandler) GetSchemaHandler
	InitMiddleware               func(InitHandler) InitHandler
	IsEqualResultMiddleware      func(IsEqualResultHandler) IsEqualResultHandler
	ResetMiddleware              func(ResetHandler) ResetHandler
	RunQueryMiddleware           func(RunQueryHandler) RunQueryHandler
	VerifyConnectivityMiddleware func(VerifyConnectivityHandler) VerifyConnectivityHandler
}

type DiscardQueryHandler func(QueryResult, *seed.Seed) bool
type GetQueryResultTypeHandler func(QueryResult, *ErrorMessageRegex) QueryResultType
type GetSchemaHandler func(DBOptions) (*schema.Schema, error)
type InitHandler func(DBOptions) error
type IsEqualResultHandler func(QueryResult, QueryResult) bool
type ResetHandler func(DBOptions) error
type RunQueryHandler func(DBOptions, string) QueryResult
type VerifyConnectivityHandler func(DBOptions) (bool, error)

func (d *DBMiddleware) DiscardQuery(a0 QueryResult, a1 *seed.Seed) bool {
	fun := d.wrapped.DiscardQuery
	if d.DiscardQueryMiddleware != nil {
		fun = d.DiscardQueryMiddleware(fun)
	}
	return fun(a0, a1)
}

func (d *DBMiddleware) GetQueryResultType(a0 QueryResult, a1 *ErrorMessageRegex) QueryResultType {
	fun := d.wrapped.GetQueryResultType
	if d.GetQueryResultTypeMiddleware != nil {
		fun = d.GetQueryResultTypeMiddleware(fun)
	}
	return fun(a0, a1)
}

func (d *DBMiddleware) GetSchema(a0 DBOptions) (*schema.Schema, error) {
	fun := d.wrapped.GetSchema
	if d.GetSchemaMiddleware != nil {
		fun = d.GetSchemaMiddleware(fun)
	}
	return fun(a0)
}

func (d *DBMiddleware) Init(a0 DBOptions) error {
	fun := d.wrapped.Init
	if d.InitMiddleware != nil {
		fun = d.InitMiddleware(fun)
	}
	return fun(a0)
}

func (d *DBMiddleware) IsEqualResult(a0 QueryResult, a1 QueryResult) bool {
	fun := d.wrapped.IsEqualResult
	if d.IsEqualResultMiddleware != nil {
		fun = d.IsEqualResultMiddleware(fun)
	}
	return fun(a0, a1)
}

func (d *DBMiddleware) Reset(a0 DBOptions) error {
	fun := d.wrapped.Reset
	if d.ResetMiddleware != nil {
		fun = d.ResetMiddleware(fun)
	}
	return fun(a0)
}

func (d *DBMiddleware) RunQuery(a0 DBOptions, a1 string) QueryResult {
	fun := d.wrapped.RunQuery
	if d.RunQueryMiddleware != nil {
		fun = d.RunQueryMiddleware(fun)
	}
	return fun(a0, a1)
}

func (d *DBMiddleware) VerifyConnectivity(a0 DBOptions) (bool, error) {
	fun := d.wrapped.VerifyConnectivity
	if d.VerifyConnectivityMiddleware != nil {
		fun = d.VerifyConnectivityMiddleware(fun)
	}
	return fun(a0)
}
